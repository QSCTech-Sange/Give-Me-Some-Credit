{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/App.vue?60d9","webpack:///./src/scripts/AdaBoostClassifier.js","webpack:///src/App.vue","webpack:///./src/App.vue?3359","webpack:///./src/App.vue","webpack:///./src/plugins/vuetify.js","webpack:///./src/main.js"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","_vm","this","_h","$createElement","_c","_self","attrs","staticClass","_v","on","rerender","scopedSlots","_u","fn","staticStyle","model","callback","$$v","RevolvingUtilizationOfUnsecuredLines","expression","proxy","Age","NumberOfTime30_59DaysPastDueNotWorse","DebtRatio","MonthlyIncome","NumberOfOpenCreditLinesAndLoans","NumberOfTimes90DaysLate","NumberRealEstateLoansOrLines","NumberOfTime60_89DaysPastDueNotWorse","NumberOfDependents","color","_s","staticRenderFns","AdaBoostClassifier","forest","Array","features","classes","predict","normalizer","sum","n_estimators","preds","n_classes","fill","Math","log","_predict","clf","prediction","console","component","VApp","VAppBar","VCardText","VCard","VCol","VIcon","VMain","VProgressLinear","VRow","VSlider","VSpacer","VTextField","VToolbarTitle","VToolbar","Vue","use","Vuetify","config","productionTip","vuetify","render","h","App","$mount"],"mappings":"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","file":"js/app.55a2087b.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"chunk-vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('v-app',[_c('v-app-bar',{attrs:{\"app\":\"\",\"color\":\"primary\",\"dark\":\"\"}},[_c('div',{staticClass:\"d-flex align-center\"},[_c('v-icon',{attrs:{\"large\":\"\"}},[_vm._v(\"mdi-finance\")]),_c('v-toolbar-title',[_vm._v(\"Model Demo\")])],1),_c('v-spacer')],1),_c('v-main',[_c('v-card-text',[_c('v-row',[_c('v-col',{staticClass:\"pr-4\"},[_c('v-slider',{staticClass:\"align-center\",attrs:{\"hide-details\":\"\",\"label\":\"Revolving Utilization Of Unsecured Lines\"},on:{\"input\":_vm.rerender},scopedSlots:_vm._u([{key:\"append\",fn:function(){return [_c('v-text-field',{staticClass:\"mt-0 pt-0\",staticStyle:{\"width\":\"60px\"},attrs:{\"hide-details\":\"\",\"single-line\":\"\",\"type\":\"number\"},model:{value:(_vm.RevolvingUtilizationOfUnsecuredLines),callback:function ($$v) {_vm.RevolvingUtilizationOfUnsecuredLines=$$v},expression:\"RevolvingUtilizationOfUnsecuredLines\"}})]},proxy:true}]),model:{value:(_vm.RevolvingUtilizationOfUnsecuredLines),callback:function ($$v) {_vm.RevolvingUtilizationOfUnsecuredLines=$$v},expression:\"RevolvingUtilizationOfUnsecuredLines\"}})],1)],1),_c('v-row',[_c('v-col',{staticClass:\"pr-4\"},[_c('v-slider',{staticClass:\"align-center\",attrs:{\"hide-details\":\"\",\"label\":\"Age\"},on:{\"input\":_vm.rerender},scopedSlots:_vm._u([{key:\"append\",fn:function(){return [_c('v-text-field',{staticClass:\"mt-0 pt-0\",staticStyle:{\"width\":\"60px\"},attrs:{\"hide-details\":\"\",\"single-line\":\"\",\"type\":\"number\"},model:{value:(_vm.Age),callback:function ($$v) {_vm.Age=$$v},expression:\"Age\"}})]},proxy:true}]),model:{value:(_vm.Age),callback:function ($$v) {_vm.Age=$$v},expression:\"Age\"}})],1)],1),_c('v-row',[_c('v-col',{staticClass:\"pr-4\"},[_c('v-slider',{staticClass:\"align-center\",attrs:{\"hide-details\":\"\",\"label\":\"Number Of Time 30-59 Days Past Due Not Worse\"},on:{\"input\":_vm.rerender},scopedSlots:_vm._u([{key:\"append\",fn:function(){return [_c('v-text-field',{staticClass:\"mt-0 pt-0\",staticStyle:{\"width\":\"60px\"},attrs:{\"hide-details\":\"\",\"single-line\":\"\",\"type\":\"number\"},model:{value:(_vm.NumberOfTime30_59DaysPastDueNotWorse),callback:function ($$v) {_vm.NumberOfTime30_59DaysPastDueNotWorse=$$v},expression:\"NumberOfTime30_59DaysPastDueNotWorse\"}})]},proxy:true}]),model:{value:(_vm.NumberOfTime30_59DaysPastDueNotWorse),callback:function ($$v) {_vm.NumberOfTime30_59DaysPastDueNotWorse=$$v},expression:\"NumberOfTime30_59DaysPastDueNotWorse\"}})],1)],1),_c('v-row',[_c('v-col',{staticClass:\"pr-4\"},[_c('v-slider',{staticClass:\"align-center\",attrs:{\"hide-details\":\"\",\"label\":\"Debt Ratio\"},on:{\"input\":_vm.rerender},scopedSlots:_vm._u([{key:\"append\",fn:function(){return [_c('v-text-field',{staticClass:\"mt-0 pt-0\",staticStyle:{\"width\":\"60px\"},attrs:{\"hide-details\":\"\",\"single-line\":\"\",\"type\":\"number\"},model:{value:(_vm.DebtRatio),callback:function ($$v) {_vm.DebtRatio=$$v},expression:\"DebtRatio\"}})]},proxy:true}]),model:{value:(_vm.DebtRatio),callback:function ($$v) {_vm.DebtRatio=$$v},expression:\"DebtRatio\"}})],1)],1),_c('v-row',[_c('v-col',{staticClass:\"pr-4\"},[_c('v-slider',{staticClass:\"align-center\",attrs:{\"hide-details\":\"\",\"label\":\"Monthly Income\"},on:{\"input\":_vm.rerender},scopedSlots:_vm._u([{key:\"append\",fn:function(){return [_c('v-text-field',{staticClass:\"mt-0 pt-0\",staticStyle:{\"width\":\"60px\"},attrs:{\"hide-details\":\"\",\"single-line\":\"\",\"type\":\"number\"},model:{value:(_vm.MonthlyIncome),callback:function ($$v) {_vm.MonthlyIncome=$$v},expression:\"MonthlyIncome\"}})]},proxy:true}]),model:{value:(_vm.MonthlyIncome),callback:function ($$v) {_vm.MonthlyIncome=$$v},expression:\"MonthlyIncome\"}})],1)],1),_c('v-row',[_c('v-col',{staticClass:\"pr-4\"},[_c('v-slider',{staticClass:\"align-center\",attrs:{\"hide-details\":\"\",\"label\":\"Number Of Open Credit Lines And Loans\"},on:{\"input\":_vm.rerender},scopedSlots:_vm._u([{key:\"append\",fn:function(){return [_c('v-text-field',{staticClass:\"mt-0 pt-0\",staticStyle:{\"width\":\"60px\"},attrs:{\"hide-details\":\"\",\"single-line\":\"\",\"type\":\"number\"},model:{value:(_vm.NumberOfOpenCreditLinesAndLoans),callback:function ($$v) {_vm.NumberOfOpenCreditLinesAndLoans=$$v},expression:\"NumberOfOpenCreditLinesAndLoans\"}})]},proxy:true}]),model:{value:(_vm.NumberOfOpenCreditLinesAndLoans),callback:function ($$v) {_vm.NumberOfOpenCreditLinesAndLoans=$$v},expression:\"NumberOfOpenCreditLinesAndLoans\"}})],1)],1),_c('v-row',[_c('v-col',{staticClass:\"pr-4\"},[_c('v-slider',{staticClass:\"align-center\",attrs:{\"hide-details\":\"\",\"label\":\"Number Of Times 90 Days Late\"},on:{\"input\":_vm.rerender},scopedSlots:_vm._u([{key:\"append\",fn:function(){return [_c('v-text-field',{staticClass:\"mt-0 pt-0\",staticStyle:{\"width\":\"60px\"},attrs:{\"hide-details\":\"\",\"single-line\":\"\",\"type\":\"number\"},model:{value:(_vm.NumberOfTimes90DaysLate),callback:function ($$v) {_vm.NumberOfTimes90DaysLate=$$v},expression:\"NumberOfTimes90DaysLate\"}})]},proxy:true}]),model:{value:(_vm.NumberOfTimes90DaysLate),callback:function ($$v) {_vm.NumberOfTimes90DaysLate=$$v},expression:\"NumberOfTimes90DaysLate\"}})],1)],1),_c('v-row',[_c('v-col',{staticClass:\"pr-4\"},[_c('v-slider',{staticClass:\"align-center\",attrs:{\"hide-details\":\"\",\"label\":\"Number Real Estate Loans Or Lines\"},on:{\"input\":_vm.rerender},scopedSlots:_vm._u([{key:\"append\",fn:function(){return [_c('v-text-field',{staticClass:\"mt-0 pt-0\",staticStyle:{\"width\":\"60px\"},attrs:{\"hide-details\":\"\",\"single-line\":\"\",\"type\":\"number\"},model:{value:(_vm.NumberRealEstateLoansOrLines),callback:function ($$v) {_vm.NumberRealEstateLoansOrLines=$$v},expression:\"NumberRealEstateLoansOrLines\"}})]},proxy:true}]),model:{value:(_vm.NumberRealEstateLoansOrLines),callback:function ($$v) {_vm.NumberRealEstateLoansOrLines=$$v},expression:\"NumberRealEstateLoansOrLines\"}})],1)],1),_c('v-row',[_c('v-col',{staticClass:\"pr-4\"},[_c('v-slider',{staticClass:\"align-center\",attrs:{\"hide-details\":\"\",\"label\":\"Number Of Time 60-89 Days Past Due Not Worse\"},scopedSlots:_vm._u([{key:\"append\",fn:function(){return [_c('v-text-field',{staticClass:\"mt-0 pt-0\",staticStyle:{\"width\":\"60px\"},attrs:{\"hide-details\":\"\",\"single-line\":\"\",\"type\":\"number\"},model:{value:(_vm.NumberOfTime60_89DaysPastDueNotWorse),callback:function ($$v) {_vm.NumberOfTime60_89DaysPastDueNotWorse=$$v},expression:\"NumberOfTime60_89DaysPastDueNotWorse\"}})]},proxy:true}]),model:{value:(_vm.NumberOfTime60_89DaysPastDueNotWorse),callback:function ($$v) {_vm.NumberOfTime60_89DaysPastDueNotWorse=$$v},expression:\"NumberOfTime60_89DaysPastDueNotWorse\"}})],1)],1),_c('v-row',[_c('v-col',{staticClass:\"pr-4\"},[_c('v-slider',{staticClass:\"align-center\",attrs:{\"hide-details\":\"\",\"label\":\"Number Of Dependents\"},on:{\"input\":_vm.rerender},scopedSlots:_vm._u([{key:\"append\",fn:function(){return [_c('v-text-field',{staticClass:\"mt-0 pt-0\",staticStyle:{\"width\":\"60px\"},attrs:{\"hide-details\":\"\",\"single-line\":\"\",\"type\":\"number\"},model:{value:(_vm.NumberOfDependents),callback:function ($$v) {_vm.NumberOfDependents=$$v},expression:\"NumberOfDependents\"}})]},proxy:true}]),model:{value:(_vm.NumberOfDependents),callback:function ($$v) {_vm.NumberOfDependents=$$v},expression:\"NumberOfDependents\"}})],1)],1)],1),_c('v-progress-linear',{attrs:{\"height\":\"25\",\"value\":_vm.result,\"color\":_vm.color}},[_c('strong',[_vm._v(\"Risk \"+_vm._s((this.result - 50) * 2)+\"%\")])])],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var AdaBoostClassifier = function() {\n    var forest = new Array();\n\n    forest.push(function(features) {\n        var classes = new Array(2);\n        if (features[7] <= 0.5) {\n            if (features[1] <= 0.5484386682510376) {\n                if (features[3] <= 0.5) {\n                    if (features[9] <= 0.5) {\n                        classes[0] = 0.6344799999993429; \n                        classes[1] = 0.010168888888888759; \n                    } else {\n                        classes[0] = 0.008000000000000052; \n                        classes[1] = 0.0010488888888888891; \n                    }\n                } else {\n                    if (features[9] <= 0.5) {\n                        classes[0] = 0.06561777777778639; \n                        classes[1] = 0.0051733333333333666; \n                    } else {\n                        classes[0] = 0.005004444444444475; \n                        classes[1] = 0.0014133333333333296; \n                    }\n                }\n            } else {\n                if (features[9] <= 0.5) {\n                    if (features[3] <= 0.5) {\n                        classes[0] = 0.1406222222222538; \n                        classes[1] = 0.011715555555555295; \n                    } else {\n                        classes[0] = 0.03515555555555485; \n                        classes[1] = 0.00882666666666665; \n                    }\n                } else {\n                    if (features[1] <= 1.000442087650299) {\n                        classes[0] = 0.009555555555555477; \n                        classes[1] = 0.004586666666666692; \n                    } else {\n                        classes[0] = 0.0013155555555555529; \n                        classes[1] = 0.0014222222222222184; \n                    }\n                }\n            }\n        } else {\n            if (features[7] <= 1.5) {\n                if (features[1] <= 0.5890044569969177) {\n                    if (features[3] <= 0.5) {\n                        classes[0] = 0.006240000000000048; \n                        classes[1] = 0.0012799999999999977; \n                    } else {\n                        classes[0] = 0.0035288888888889004; \n                        classes[1] = 0.0015555555555555503; \n                    }\n                } else {\n                    if (features[9] <= 0.5) {\n                        classes[0] = 0.01001777777777766; \n                        classes[1] = 0.005617777777777817; \n                    } else {\n                        classes[0] = 0.003102222222222228; \n                        classes[1] = 0.0033866666666666763; \n                    }\n                }\n            } else {\n                if (features[3] <= 0.5) {\n                    if (features[7] <= 2.5) {\n                        classes[0] = 0.0028533333333333358; \n                        classes[1] = 0.0019199999999999907; \n                    } else {\n                        classes[0] = 0.0015288888888888839; \n                        classes[1] = 0.001973333333333324; \n                    }\n                } else {\n                    if (features[1] <= 1.0269272923469543) {\n                        classes[0] = 0.00460444444444447; \n                        classes[1] = 0.006320000000000049; \n                    } else {\n                        classes[0] = 0.00045333333333333375; \n                        classes[1] = 0.0015111111111111063; \n                    }\n                }\n            }\n        }\n        return classes;\n    });\n    \n    forest.push(function(features) {\n        var classes = new Array(2);\n        if (features[7] <= 0.5) {\n            if (features[1] <= 0.5009894967079163) {\n                if (features[3] <= 0.5) {\n                    if (features[9] <= 0.5) {\n                        classes[0] = 0.5872500447675792; \n                        classes[1] = 0.0134834596757335; \n                    } else {\n                        classes[0] = 0.008045046987297045; \n                        classes[1] = 0.0012264503220775192; \n                    }\n                } else {\n                    if (features[9] <= 0.5) {\n                        classes[0] = 0.06448614912498972; \n                        classes[1] = 0.006301957954521647; \n                    } else {\n                        classes[0] = 0.005132471161492482; \n                        classes[1] = 0.001621515323233032; \n                    }\n                }\n            } else {\n                if (features[3] <= 1.5) {\n                    if (features[9] <= 0.5) {\n                        classes[0] = 0.18735672305752718; \n                        classes[1] = 0.02272224473092157; \n                    } else {\n                        classes[0] = 0.00966295498256254; \n                        classes[1] = 0.004476650283811878; \n                    }\n                } else {\n                    if (features[1] <= 1.009725570678711) {\n                        classes[0] = 0.014221525363555193; \n                        classes[1] = 0.006660950049839389; \n                    } else {\n                        classes[0] = 0.001342056465489857; \n                        classes[1] = 0.00168657889716183; \n                    }\n                }\n            }\n        } else {\n            if (features[7] <= 1.5) {\n                if (features[1] <= 0.48228320479393005) {\n                    if (features[9] <= 0.5) {\n                        classes[0] = 0.007985170407097064; \n                        classes[1] = 0.0020460817459074933; \n                    } else {\n                        classes[0] = 0.0013710027947959136; \n                        classes[1] = 0.0008005536356421198; \n                    }\n                } else {\n                    if (features[9] <= 0.5) {\n                        classes[0] = 0.012357867248029415; \n                        classes[1] = 0.007162980086491472; \n                    } else {\n                        classes[0] = 0.003914651400937634; \n                        classes[1] = 0.004156618326065433; \n                    }\n                }\n            } else {\n                if (features[9] <= 0.5) {\n                    if (features[3] <= 0.5) {\n                        classes[0] = 0.003758596359171508; \n                        classes[1] = 0.0028803539832773072; \n                    } else {\n                        classes[0] = 0.0028638668425378902; \n                        classes[1] = 0.003500432630721294; \n                    }\n                } else {\n                    if (features[2] <= 23.5) {\n                        classes[0] = 0.0003892161273136898; \n                        classes[1] = 0.00014306169621091543; \n                    } else {\n                        classes[0] = 0.00406133802818828; \n                        classes[1] = 0.006931429540259405; \n                    }\n                }\n            }\n        }\n        return classes;\n    });\n    \n    forest.push(function(features) {\n        var classes = new Array(2);\n        if (features[7] <= 0.5) {\n            if (features[1] <= 0.5009894967079163) {\n                if (features[3] <= 0.5) {\n                    if (features[1] <= 0.22758375108242035) {\n                        classes[0] = 0.45196767121180453; \n                        classes[1] = 0.012252622650598033; \n                    } else {\n                        classes[0] = 0.1105923582272971; \n                        classes[1] = 0.007842189854968568; \n                    }\n                } else {\n                    if (features[3] <= 1.5) {\n                        classes[0] = 0.05558266421605871; \n                        classes[1] = 0.00593148476578994; \n                    } else {\n                        classes[0] = 0.015368827606045167; \n                        classes[1] = 0.004094487606524057; \n                    }\n                }\n            } else {\n                if (features[3] <= 0.5) {\n                    if (features[9] <= 0.5) {\n                        classes[0] = 0.16260901281195989; \n                        classes[1] = 0.020943108152523805; \n                    } else {\n                        classes[0] = 0.0066985544145516445; \n                        classes[1] = 0.0030712077332730346; \n                    }\n                } else {\n                    if (features[9] <= 0.5) {\n                        classes[0] = 0.04303858451144195; \n                        classes[1] = 0.014140880137471978; \n                    } else {\n                        classes[0] = 0.007564572540497138; \n                        classes[1] = 0.005711196908497081; \n                    }\n                }\n            }\n        } else {\n            if (features[7] <= 1.5) {\n                if (features[1] <= 0.7338275909423828) {\n                    if (features[3] <= 0.5) {\n                        classes[0] = 0.008152890375770223; \n                        classes[1] = 0.0023182641622548792; \n                    } else {\n                        classes[0] = 0.005268547311626662; \n                        classes[1] = 0.002897340747207092; \n                    }\n                } else {\n                    if (features[9] <= 1.5) {\n                        classes[0] = 0.013902808668348957; \n                        classes[1] = 0.009784479087685831; \n                    } else {\n                        classes[0] = 0.000879817459510971; \n                        classes[1] = 0.0015463938979239597; \n                    }\n                }\n            } else {\n                if (features[1] <= 1.0269272923469543) {\n                    if (features[7] <= 2.5) {\n                        classes[0] = 0.006509930017950162; \n                        classes[1] = 0.0056450295409074; \n                    } else {\n                        classes[0] = 0.005033132188237454; \n                        classes[1] = 0.006918578126632166; \n                    }\n                } else {\n                    if (features[3] <= 2.5) {\n                        classes[0] = 0.0010423054454309062; \n                        classes[1] = 0.0018471441203756192; \n                    } else {\n                        classes[0] = 0.00011501135026791199; \n                        classes[1] = 0.0007289041508220792; \n                    }\n                }\n            }\n        }\n        return classes;\n    });\n    \n    forest.push(function(features) {\n        var classes = new Array(2);\n        if (features[7] <= 0.5) {\n            if (features[1] <= 0.3961758315563202) {\n                if (features[3] <= 0.5) {\n                    if (features[9] <= 0.5) {\n                        classes[0] = 0.4907695523387516; \n                        classes[1] = 0.02063352788018329; \n                    } else {\n                        classes[0] = 0.006891331197903578; \n                        classes[1] = 0.001842685362661528; \n                    }\n                } else {\n                    if (features[3] <= 1.5) {\n                        classes[0] = 0.04972179503824793; \n                        classes[1] = 0.006192568291270916; \n                    } else {\n                        classes[0] = 0.013846075263344212; \n                        classes[1] = 0.004148989027645912; \n                    }\n                }\n            } else {\n                if (features[3] <= 0.5) {\n                    if (features[9] <= 0.5) {\n                        classes[0] = 0.19636902836031597; \n                        classes[1] = 0.029753428150429116; \n                    } else {\n                        classes[0] = 0.008247740706649088; \n                        classes[1] = 0.003757416212161486; \n                    }\n                } else {\n                    if (features[1] <= 1.0041382908821106) {\n                        classes[0] = 0.0575381302551605; \n                        classes[1] = 0.020645029137898726; \n                    } else {\n                        classes[0] = 0.0045302315170405874; \n                        classes[1] = 0.004549202715335161; \n                    }\n                }\n            }\n        } else {\n            if (features[7] <= 1.5) {\n                if (features[1] <= 0.48228320479393005) {\n                    if (features[9] <= 0.5) {\n                        classes[0] = 0.00902865141753692; \n                        classes[1] = 0.0029284254387152704; \n                    } else {\n                        classes[0] = 0.0016317537720368874; \n                        classes[1] = 0.0010966203074325078; \n                    }\n                } else {\n                    if (features[9] <= 0.5) {\n                        classes[0] = 0.014987210044175952; \n                        classes[1] = 0.009588924246074356; \n                    } else {\n                        classes[0] = 0.004946640833487547; \n                        classes[1] = 0.005318055430393708; \n                    }\n                }\n            } else {\n                if (features[4] <= 0.12061411887407303) {\n                    if (features[2] <= 22.5) {\n                        classes[0] = 0.00035017789356658815; \n                        classes[1] = 0.00012107720350467303; \n                    } else {\n                        classes[0] = 0.004646926159569788; \n                        classes[1] = 0.003999186595342033; \n                    }\n                } else {\n                    if (features[7] <= 3.5) {\n                        classes[0] = 0.007655881967867228; \n                        classes[1] = 0.00895068768486087; \n                    } else {\n                        classes[0] = 0.0016465369161086476; \n                        classes[1] = 0.0036665126338477393; \n                    }\n                }\n            }\n        }\n        return classes;\n    });\n    \n    forest.push(function(features) {\n        var classes = new Array(2);\n        if (features[7] <= 0.5) {\n            if (features[1] <= 0.3855256587266922) {\n                if (features[3] <= 0.5) {\n                    if (features[9] <= 0.5) {\n                        classes[0] = 0.4572290982320376; \n                        classes[1] = 0.026155659033892293; \n                    } else {\n                        classes[0] = 0.006967832192189945; \n                        classes[1] = 0.0020785401869859196; \n                    }\n                } else {\n                    if (features[3] <= 1.5) {\n                        classes[0] = 0.04867941292709954; \n                        classes[1] = 0.0074227009966387055; \n                    } else {\n                        classes[0] = 0.014030749674166527; \n                        classes[1] = 0.004785706969108623; \n                    }\n                }\n            } else {\n                if (features[3] <= 1.5) {\n                    if (features[9] <= 0.5) {\n                        classes[0] = 0.23897342701657834; \n                        classes[1] = 0.048304534293236265; \n                    } else {\n                        classes[0] = 0.013892935172515794; \n                        classes[1] = 0.007573252529966791; \n                    }\n                } else {\n                    if (features[9] <= 0.5) {\n                        classes[0] = 0.017211464991631693; \n                        classes[1] = 0.009224099661793096; \n                    } else {\n                        classes[0] = 0.004705324690000465; \n                        classes[1] = 0.004771729499792332; \n                    }\n                }\n            }\n        } else {\n            if (features[9] <= 0.5) {\n                if (features[1] <= 0.7359314262866974) {\n                    if (features[3] <= 0.5) {\n                        classes[0] = 0.009641917669841571; \n                        classes[1] = 0.0031522026595110155; \n                    } else {\n                        classes[0] = 0.005422012918846927; \n                        classes[1] = 0.0037652839488068824; \n                    }\n                } else {\n                    if (features[7] <= 2.5) {\n                        classes[0] = 0.017273383961885214; \n                        classes[1] = 0.01280510000171678; \n                    } else {\n                        classes[0] = 0.002520577121655717; \n                        classes[1] = 0.003258222758718267; \n                    }\n                }\n            } else {\n                if (features[7] <= 2.5) {\n                    if (features[9] <= 1.5) {\n                        classes[0] = 0.0074682992884237305; \n                        classes[1] = 0.006890635642085883; \n                    } else {\n                        classes[0] = 0.002706326146071576; \n                        classes[1] = 0.003776346693514057; \n                    }\n                } else {\n                    if (features[4] <= 0.10569429397583008) {\n                        classes[0] = 0.0017028125515980083; \n                        classes[1] = 0.001631692169380161; \n                    } else {\n                        classes[0] = 0.0017964992295062526; \n                        classes[1] = 0.004182219170329307; \n                    }\n                }\n            }\n        }\n        return classes;\n    });\n    \n    forest.push(function(features) {\n        var classes = new Array(2);\n        if (features[7] <= 0.5) {\n            if (features[1] <= 0.3012845367193222) {\n                if (features[9] <= 0.5) {\n                    if (features[8] <= 3.5) {\n                        classes[0] = 0.4397417658237335; \n                        classes[1] = 0.03403527023910061; \n                    } else {\n                        classes[0] = 0.010670536004301772; \n                        classes[1] = 0.003727731960091791; \n                    }\n                } else {\n                    if (features[9] <= 1.5) {\n                        classes[0] = 0.009390262774584957; \n                        classes[1] = 0.003470103524204569; \n                    } else {\n                        classes[0] = 0.0008435939680683143; \n                        classes[1] = 0.0007672531776458552; \n                    }\n                }\n            } else {\n                if (features[3] <= 0.5) {\n                    if (features[2] <= 52.5) {\n                        classes[0] = 0.1503558021435975; \n                        classes[1] = 0.039672017826939424; \n                    } else {\n                        classes[0] = 0.08915357598753301; \n                        classes[1] = 0.01261056709456611; \n                    }\n                } else {\n                    if (features[1] <= 0.8597841262817383) {\n                        classes[0] = 0.046163409203576394; \n                        classes[1] = 0.016439931786089424; \n                    } else {\n                        classes[0] = 0.029024676553924496; \n                        classes[1] = 0.019243003031139422; \n                    }\n                }\n            }\n        } else {\n            if (features[7] <= 1.5) {\n                if (features[1] <= 0.26901014149188995) {\n                    if (features[9] <= 0.5) {\n                        classes[0] = 0.007145850268825388; \n                        classes[1] = 0.002333027136672023; \n                    } else {\n                        classes[0] = 0.001441524604786651; \n                        classes[1] = 0.0010228103385933334; \n                    }\n                } else {\n                    if (features[3] <= 1.5) {\n                        classes[0] = 0.02061983235266326; \n                        classes[1] = 0.013823424027930143; \n                    } else {\n                        classes[0] = 0.00546768154502705; \n                        classes[1] = 0.006159559568408734; \n                    }\n                }\n            } else {\n                if (features[3] <= 0.5) {\n                    if (features[7] <= 2.5) {\n                        classes[0] = 0.004837704837886889; \n                        classes[1] = 0.003522235507652698; \n                    } else {\n                        classes[0] = 0.0028190255719014244; \n                        classes[1] = 0.003274639173504749; \n                    }\n                } else {\n                    if (features[4] <= 0.12439052388072014) {\n                        classes[0] = 0.0032020076962675195; \n                        classes[1] = 0.0029856807582355543; \n                    } else {\n                        classes[0] = 0.006206043878173701; \n                        classes[1] = 0.009829451634240644; \n                    }\n                }\n            }\n        }\n        return classes;\n    });\n    \n    forest.push(function(features) {\n        var classes = new Array(2);\n        if (features[1] <= 0.6987756490707397) {\n            if (features[3] <= 0.5) {\n                if (features[1] <= 0.15662160515785217) {\n                    if (features[9] <= 0.5) {\n                        classes[0] = 0.3141780295385139; \n                        classes[1] = 0.025723396802410824; \n                    } else {\n                        classes[0] = 0.005262246951947112; \n                        classes[1] = 0.0023143951693321923; \n                    }\n                } else {\n                    if (features[8] <= 3.5) {\n                        classes[0] = 0.18958194263733577; \n                        classes[1] = 0.034465441616874065; \n                    } else {\n                        classes[0] = 0.005675959526932226; \n                        classes[1] = 0.0029993490757957986; \n                    }\n                }\n            } else {\n                if (features[7] <= 0.5) {\n                    if (features[3] <= 1.5) {\n                        classes[0] = 0.06374431274565845; \n                        classes[1] = 0.015641068547214757; \n                    } else {\n                        classes[0] = 0.022137837310000144; \n                        classes[1] = 0.010320692751209294; \n                    }\n                } else {\n                    if (features[7] <= 1.5) {\n                        classes[0] = 0.006384018851151787; \n                        classes[1] = 0.004329286528888057; \n                    } else {\n                        classes[0] = 0.00231079533695082; \n                        classes[1] = 0.0024997082187094987; \n                    }\n                }\n            }\n        } else {\n            if (features[7] <= 0.5) {\n                if (features[3] <= 0.5) {\n                    if (features[2] <= 53.5) {\n                        classes[0] = 0.07986758172522132; \n                        classes[1] = 0.028963130588410328; \n                    } else {\n                        classes[0] = 0.03667519446541373; \n                        classes[1] = 0.00730483273727467; \n                    }\n                } else {\n                    if (features[1] <= 1.0041382908821106) {\n                        classes[0] = 0.03797922999700569; \n                        classes[1] = 0.021213293397267862; \n                    } else {\n                        classes[0] = 0.005386239382784707; \n                        classes[1] = 0.0061629956023309925; \n                    }\n                }\n            } else {\n                if (features[9] <= 0.5) {\n                    if (features[1] <= 1.0008464455604553) {\n                        classes[0] = 0.020320878264717908; \n                        classes[1] = 0.015500975144628991; \n                    } else {\n                        classes[0] = 0.0028168962171490463; \n                        classes[1] = 0.003728249367702938; \n                    }\n                } else {\n                    if (features[8] <= 0.5) {\n                        classes[0] = 0.007789739501950955; \n                        classes[1] = 0.008557802191538665; \n                    } else {\n                        classes[0] = 0.0037007442961865004; \n                        classes[1] = 0.006463735511682192; \n                    }\n                }\n            }\n        }\n        return classes;\n    });\n    \n    forest.push(function(features) {\n        var classes = new Array(2);\n        if (features[1] <= 0.673239141702652) {\n            if (features[3] <= 0.5) {\n                if (features[1] <= 0.1416529417037964) {\n                    if (features[7] <= 0.5) {\n                        classes[0] = 0.2841686347015155; \n                        classes[1] = 0.029332265038301247; \n                    } else {\n                        classes[0] = 0.00469566899549645; \n                        classes[1] = 0.002393332294845458; \n                    }\n                } else {\n                    if (features[2] <= 55.5) {\n                        classes[0] = 0.12598910103113145; \n                        classes[1] = 0.0327412954413658; \n                    } else {\n                        classes[0] = 0.06778511842565618; \n                        classes[1] = 0.009937308341992739; \n                    }\n                }\n            } else {\n                if (features[7] <= 0.5) {\n                    if (features[9] <= 0.5) {\n                        classes[0] = 0.07552081464207151; \n                        classes[1] = 0.02307559271012797; \n                    } else {\n                        classes[0] = 0.007825826005796439; \n                        classes[1] = 0.005318049560007512; \n                    }\n                } else {\n                    if (features[2] <= 60.5) {\n                        classes[0] = 0.00665224837799411; \n                        classes[1] = 0.0058384204676333075; \n                    } else {\n                        classes[0] = 0.002124571566163043; \n                        classes[1] = 0.0011479391303956304; \n                    }\n                }\n            }\n        } else {\n            if (features[7] <= 0.5) {\n                if (features[9] <= 0.5) {\n                    if (features[3] <= 0.5) {\n                        classes[0] = 0.11571725492524755; \n                        classes[1] = 0.037571031871113485; \n                    } else {\n                        classes[0] = 0.0388161717547978; \n                        classes[1] = 0.021835695988529746; \n                    }\n                } else {\n                    if (features[9] <= 1.5) {\n                        classes[0] = 0.01183383709409612; \n                        classes[1] = 0.009512514800593187; \n                    } else {\n                        classes[0] = 0.0025606975375543563; \n                        classes[1] = 0.0037981047853885954; \n                    }\n                }\n            } else {\n                if (features[7] <= 2.5) {\n                    if (features[1] <= 1.0482730269432068) {\n                        classes[0] = 0.027263160672791997; \n                        classes[1] = 0.02248379646604125; \n                    } else {\n                        classes[0] = 0.002741438670392116; \n                        classes[1] = 0.004091302747337996; \n                    }\n                } else {\n                    if (features[4] <= 0.1009497381746769) {\n                        classes[0] = 0.0030006724585038805; \n                        classes[1] = 0.002835933121361235; \n                    } else {\n                        classes[0] = 0.004088575041835372; \n                        classes[1] = 0.007303625334103207; \n                    }\n                }\n            }\n        }\n        return classes;\n    });\n    \n    forest.push(function(features) {\n        var classes = new Array(2);\n        if (features[1] <= 0.5990689396858215) {\n            if (features[3] <= 0.5) {\n                if (features[2] <= 54.5) {\n                    if (features[8] <= 2.5) {\n                        classes[0] = 0.20920169269086297; \n                        classes[1] = 0.04558109423307162; \n                    } else {\n                        classes[0] = 0.016279704103684928; \n                        classes[1] = 0.008041579436922653; \n                    }\n                } else {\n                    if (features[7] <= 0.5) {\n                        classes[0] = 0.21061259186156953; \n                        classes[1] = 0.024209440574189896; \n                    } else {\n                        classes[0] = 0.0038265005418916392; \n                        classes[1] = 0.001956830174277346; \n                    }\n                }\n            } else {\n                if (features[3] <= 1.5) {\n                    if (features[9] <= 0.5) {\n                        classes[0] = 0.05614278448865255; \n                        classes[1] = 0.017111583090136183; \n                    } else {\n                        classes[0] = 0.005057991236118116; \n                        classes[1] = 0.003454400233995917; \n                    }\n                } else {\n                    if (features[7] <= 0.5) {\n                        classes[0] = 0.019612189568207084; \n                        classes[1] = 0.010763343889595775; \n                    } else {\n                        classes[0] = 0.0035299782080334186; \n                        classes[1] = 0.003186753668842409; \n                    }\n                }\n            }\n        } else {\n            if (features[7] <= 0.5) {\n                if (features[9] <= 0.5) {\n                    if (features[3] <= 0.5) {\n                        classes[0] = 0.13193894272029458; \n                        classes[1] = 0.0460664836844332; \n                    } else {\n                        classes[0] = 0.04507632051040605; \n                        classes[1] = 0.026077141871392852; \n                    }\n                } else {\n                    if (features[4] <= 0.40291526913642883) {\n                        classes[0] = 0.008690797931383328; \n                        classes[1] = 0.006217804870042727; \n                    } else {\n                        classes[0] = 0.007700628936684999; \n                        classes[1] = 0.008954957532823602; \n                    }\n                }\n            } else {\n                if (features[9] <= 0.5) {\n                    if (features[3] <= 1.5) {\n                        classes[0] = 0.022479067639216328; \n                        classes[1] = 0.017214926764107446; \n                    } else {\n                        classes[0] = 0.0044751364235310455; \n                        classes[1] = 0.005558714093504488; \n                    }\n                } else {\n                    if (features[8] <= 0.5) {\n                        classes[0] = 0.00914470244254737; \n                        classes[1] = 0.00974222217463122; \n                    } else {\n                        classes[0] = 0.004640192801422115; \n                        classes[1] = 0.00745350160370935; \n                    }\n                }\n            }\n        }\n        return classes;\n    });\n    \n    forest.push(function(features) {\n        var classes = new Array(2);\n        if (features[1] <= 0.31443046033382416) {\n            if (features[9] <= 0.5) {\n                if (features[8] <= 2.5) {\n                    if (features[3] <= 0.5) {\n                        classes[0] = 0.3058583539840304; \n                        classes[1] = 0.04839960063876858; \n                    } else {\n                        classes[0] = 0.045538667670857846; \n                        classes[1] = 0.015501683372672121; \n                    }\n                } else {\n                    if (features[4] <= 0.33831703662872314) {\n                        classes[0] = 0.004734526083825128; \n                        classes[1] = 0.0006034108739857042; \n                    } else {\n                        classes[0] = 0.02192883187900892; \n                        classes[1] = 0.011381932711613602; \n                    }\n                }\n            } else {\n                if (features[4] <= 2313.0) {\n                    if (features[9] <= 1.5) {\n                        classes[0] = 0.010794512326468133; \n                        classes[1] = 0.007187899680176054; \n                    } else {\n                        classes[0] = 0.0013118548593390148; \n                        classes[1] = 0.0017050690348389868; \n                    }\n                } else {\n                    if (features[4] <= 19811.5) {\n                        classes[0] = 0.00060526321065017; \n                        classes[1] = 6.560880243822305e-05; \n                    } else {\n                        classes[0] = 0.0; \n                        classes[1] = 2.3897278019692075e-05; \n                    }\n                }\n            }\n        } else {\n            if (features[7] <= 0.5) {\n                if (features[9] <= 0.5) {\n                    if (features[1] <= 1.0010430812835693) {\n                        classes[0] = 0.26378818535072496; \n                        classes[1] = 0.10153920244099064; \n                    } else {\n                        classes[0] = 0.011494708191115977; \n                        classes[1] = 0.01004532691985782; \n                    }\n                } else {\n                    if (features[9] <= 1.5) {\n                        classes[0] = 0.018738442345188032; \n                        classes[1] = 0.014586619810032227; \n                    } else {\n                        classes[0] = 0.003784759682385586; \n                        classes[1] = 0.005190738635080771; \n                    }\n                }\n            } else {\n                if (features[7] <= 2.5) {\n                    if (features[3] <= 1.5) {\n                        classes[0] = 0.030284487192677113; \n                        classes[1] = 0.024243483613924286; \n                    } else {\n                        classes[0] = 0.009219900621285458; \n                        classes[1] = 0.010680829024022401; \n                    }\n                } else {\n                    if (features[2] <= 23.5) {\n                        classes[0] = 0.0006569856927514774; \n                        classes[1] = 0.0002674192817938167; \n                    } else {\n                        classes[0] = 0.008182624700101105; \n                        classes[1] = 0.011655174091678298; \n                    }\n                }\n            }\n        }\n        return classes;\n    });\n    \n    forest.push(function(features) {\n        var classes = new Array(2);\n        if (features[1] <= 0.3012845367193222) {\n            if (features[9] <= 0.5) {\n                if (features[8] <= 2.5) {\n                    if (features[7] <= 0.5) {\n                        classes[0] = 0.31980074943934217; \n                        classes[1] = 0.06417694201854988; \n                    } else {\n                        classes[0] = 0.007967390708636559; \n                        classes[1] = 0.005639040299750238; \n                    }\n                } else {\n                    if (features[4] <= 0.46618860960006714) {\n                        classes[0] = 0.009343716001276044; \n                        classes[1] = 0.002615830671624791; \n                    } else {\n                        classes[0] = 0.01651035239433805; \n                        classes[1] = 0.010058708280253369; \n                    }\n                }\n            } else {\n                if (features[4] <= 59.0) {\n                    if (features[9] <= 1.5) {\n                        classes[0] = 0.009308576184369912; \n                        classes[1] = 0.006812997390971293; \n                    } else {\n                        classes[0] = 0.0011164592732283247; \n                        classes[1] = 0.001541108937161481; \n                    }\n                } else {\n                    if (features[3] <= 1.5) {\n                        classes[0] = 0.001694450931923892; \n                        classes[1] = 0.00039162590767912033; \n                    } else {\n                        classes[0] = 0.00040420632887208186; \n                        classes[1] = 0.0004136563195351774; \n                    }\n                }\n            }\n        } else {\n            if (features[7] <= 0.5) {\n                if (features[3] <= 1.5) {\n                    if (features[2] <= 55.5) {\n                        classes[0] = 0.19513894972699572; \n                        classes[1] = 0.09530702450920801; \n                    } else {\n                        classes[0] = 0.07771513409932537; \n                        classes[1] = 0.02365534918936334; \n                    }\n                } else {\n                    if (features[4] <= 0.4860619455575943) {\n                        classes[0] = 0.015333508235381115; \n                        classes[1] = 0.010636701388793472; \n                    } else {\n                        classes[0] = 0.012261216295720986; \n                        classes[1] = 0.013580680511589713; \n                    }\n                }\n            } else {\n                if (features[9] <= 1.5) {\n                    if (features[1] <= 1.0008464455604553) {\n                        classes[0] = 0.038935590352430244; \n                        classes[1] = 0.03312533251237112; \n                    } else {\n                        classes[0] = 0.0050050271938658405; \n                        classes[1] = 0.006713230622848511; \n                    }\n                } else {\n                    if (features[4] <= 0.4101242572069168) {\n                        classes[0] = 0.004096924440071257; \n                        classes[1] = 0.0044153509474789574; \n                    } else {\n                        classes[0] = 0.0019296642806684936; \n                        classes[1] = 0.004354504606424305; \n                    }\n                }\n            }\n        }\n        return classes;\n    });\n    \n    forest.push(function(features) {\n        var classes = new Array(2);\n        if (features[1] <= 0.6989775598049164) {\n            if (features[3] <= 0.5) {\n                if (features[2] <= 59.5) {\n                    if (features[8] <= 4.5) {\n                        classes[0] = 0.26170367753346285; \n                        classes[1] = 0.08797041524919233; \n                    } else {\n                        classes[0] = 0.0028794177372430856; \n                        classes[1] = 0.003815329515882401; \n                    }\n                } else {\n                    if (features[6] <= 13.5) {\n                        classes[0] = 0.11813174725229454; \n                        classes[1] = 0.018052798497712078; \n                    } else {\n                        classes[0] = 0.024849772798587227; \n                        classes[1] = 0.007903606010061702; \n                    }\n                }\n            } else {\n                if (features[3] <= 1.5) {\n                    if (features[7] <= 0.5) {\n                        classes[0] = 0.05843175956340092; \n                        classes[1] = 0.02519077573115116; \n                    } else {\n                        classes[0] = 0.00520065770824213; \n                        classes[1] = 0.004314665726549226; \n                    }\n                } else {\n                    if (features[3] <= 2.5) {\n                        classes[0] = 0.017700919385174315; \n                        classes[1] = 0.011277437981109324; \n                    } else {\n                        classes[0] = 0.009166247181560706; \n                        classes[1] = 0.00856836630270617; \n                    }\n                }\n            }\n        } else {\n            if (features[3] <= 0.5) {\n                if (features[2] <= 62.5) {\n                    if (features[7] <= 0.5) {\n                        classes[0] = 0.09548998690660848; \n                        classes[1] = 0.052108037918887774; \n                    } else {\n                        classes[0] = 0.01884827678047217; \n                        classes[1] = 0.016343753918151904; \n                    }\n                } else {\n                    if (features[9] <= 0.5) {\n                        classes[0] = 0.01648606664557257; \n                        classes[1] = 0.004100095572240645; \n                    } else {\n                        classes[0] = 0.0008416394918801737; \n                        classes[1] = 0.0007515927661411691; \n                    }\n                }\n            } else {\n                if (features[1] <= 1.009725570678711) {\n                    if (features[9] <= 1.5) {\n                        classes[0] = 0.053059851393454725; \n                        classes[1] = 0.04140430189294511; \n                    } else {\n                        classes[0] = 0.0053309381063822115; \n                        classes[1] = 0.007505032787642686; \n                    }\n                } else {\n                    if (features[0] <= 133674.0) {\n                        classes[0] = 0.00868536501303634; \n                        classes[1] = 0.011208328683837076; \n                    } else {\n                        classes[0] = 0.0006370898013811197; \n                        classes[1] = 0.0020420481471327724; \n                    }\n                }\n            }\n        }\n        return classes;\n    });\n    \n    forest.push(function(features) {\n        var classes = new Array(2);\n        if (features[1] <= 0.231756292283535) {\n            if (features[9] <= 0.5) {\n                if (features[2] <= 46.5) {\n                    if (features[6] <= 13.5) {\n                        classes[0] = 0.07759880186458427; \n                        classes[1] = 0.028233095245156735; \n                    } else {\n                        classes[0] = 0.008617561659855479; \n                        classes[1] = 0.006781857465213553; \n                    }\n                } else {\n                    if (features[6] <= 6.5) {\n                        classes[0] = 0.07140459112777016; \n                        classes[1] = 0.009891875178162264; \n                    } else {\n                        classes[0] = 0.13742514089306077; \n                        classes[1] = 0.03988648706530759; \n                    }\n                }\n            } else {\n                if (features[4] <= 2315.5) {\n                    if (features[8] <= 2.5) {\n                        classes[0] = 0.009593893682497774; \n                        classes[1] = 0.008001031925875748; \n                    } else {\n                        classes[0] = 0.0006442253206546229; \n                        classes[1] = 0.0010816765327972741; \n                    }\n                } else {\n                    if (features[7] <= 2.0) {\n                        classes[0] = 0.0004429520178919; \n                        classes[1] = 4.195163172629214e-05; \n                    } else {\n                        classes[0] = 0.0; \n                        classes[1] = 2.085955293694868e-05; \n                    }\n                }\n            }\n        } else {\n            if (features[7] <= 0.5) {\n                if (features[9] <= 0.5) {\n                    if (features[2] <= 55.5) {\n                        classes[0] = 0.21144096686295022; \n                        classes[1] = 0.11837753707055323; \n                    } else {\n                        classes[0] = 0.08461684183086657; \n                        classes[1] = 0.03172981838859978; \n                    }\n                } else {\n                    if (features[1] <= 0.8808233737945557) {\n                        classes[0] = 0.013952872622727782; \n                        classes[1] = 0.010755678247153512; \n                    } else {\n                        classes[0] = 0.010664159630916293; \n                        classes[1] = 0.012836853659206032; \n                    }\n                }\n            } else {\n                if (features[7] <= 1.5) {\n                    if (features[4] <= 2464.0) {\n                        classes[0] = 0.031263836018038636; \n                        classes[1] = 0.02841444123482968; \n                    } else {\n                        classes[0] = 0.0013912145741979546; \n                        classes[1] = 0.00038435987261203897; \n                    }\n                } else {\n                    if (features[4] <= 0.10261600092053413) {\n                        classes[0] = 0.0063643615861140885; \n                        classes[1] = 0.005499039245922489; \n                    } else {\n                        classes[0] = 0.014124787607456196; \n                        classes[1] = 0.01851723038436823; \n                    }\n                }\n            }\n        }\n        return classes;\n    });\n    \n    forest.push(function(features) {\n        var classes = new Array(2);\n        if (features[1] <= 0.22758375108242035) {\n            if (features[3] <= 0.5) {\n                if (features[6] <= 10.5) {\n                    if (features[7] <= 0.5) {\n                        classes[0] = 0.17273184460391208; \n                        classes[1] = 0.041559774995541685; \n                    } else {\n                        classes[0] = 0.0035419730686545494; \n                        classes[1] = 0.0033924709002945397; \n                    }\n                } else {\n                    if (features[2] <= 43.5) {\n                        classes[0] = 0.011518291116616309; \n                        classes[1] = 0.008408178724177285; \n                    } else {\n                        classes[0] = 0.05943690234895425; \n                        classes[1] = 0.021993336224563457; \n                    }\n                }\n            } else {\n                if (features[3] <= 1.5) {\n                    if (features[0] <= 135921.0) {\n                        classes[0] = 0.02944052570559337; \n                        classes[1] = 0.013086210193543845; \n                    } else {\n                        classes[0] = 0.002886875108329255; \n                        classes[1] = 0.0024496889638315027; \n                    }\n                } else {\n                    if (features[5] <= 5428.5) {\n                        classes[0] = 0.0040299169696863925; \n                        classes[1] = 0.004843826637545759; \n                    } else {\n                        classes[0] = 0.006769828431172752; \n                        classes[1] = 0.004351887851301482; \n                    }\n                }\n            }\n        } else {\n            if (features[9] <= 0.5) {\n                if (features[3] <= 0.5) {\n                    if (features[2] <= 58.5) {\n                        classes[0] = 0.18956568526533946; \n                        classes[1] = 0.10629489570970921; \n                    } else {\n                        classes[0] = 0.05302003412793176; \n                        classes[1] = 0.01896653123842874; \n                    }\n                } else {\n                    if (features[3] <= 2.5) {\n                        classes[0] = 0.07617067639214434; \n                        classes[1] = 0.05409857820239898; \n                    } else {\n                        classes[0] = 0.010681158328351904; \n                        classes[1] = 0.012243782729456287; \n                    }\n                }\n            } else {\n                if (features[9] <= 1.5) {\n                    if (features[1] <= 0.8618655800819397) {\n                        classes[0] = 0.015074622219149998; \n                        classes[1] = 0.011697873441832037; \n                    } else {\n                        classes[0] = 0.017054703655672198; \n                        classes[1] = 0.01856258118966663; \n                    }\n                } else {\n                    if (features[4] <= 0.1281353235244751) {\n                        classes[0] = 0.003270849891330064; \n                        classes[1] = 0.003087462993065588; \n                    } else {\n                        classes[0] = 0.007719308858368329; \n                        classes[1] = 0.01204972391352965; \n                    }\n                }\n            }\n        }\n        return classes;\n    });\n    \n    forest.push(function(features) {\n        var classes = new Array(2);\n        if (features[1] <= 0.13754335045814514) {\n            if (features[7] <= 0.5) {\n                if (features[8] <= 2.5) {\n                    if (features[2] <= 57.5) {\n                        classes[0] = 0.11109488500607353; \n                        classes[1] = 0.04305709796429393; \n                    } else {\n                        classes[0] = 0.09736692995941755; \n                        classes[1] = 0.02182344284992379; \n                    }\n                } else {\n                    if (features[4] <= 0.37045831978321075) {\n                        classes[0] = 0.0036107550659626596; \n                        classes[1] = 0.0010316410259130098; \n                    } else {\n                        classes[0] = 0.012733453030104085; \n                        classes[1] = 0.01014346973363082; \n                    }\n                }\n            } else {\n                if (features[7] <= 1.5) {\n                    if (features[1] <= 0.09519911929965019) {\n                        classes[0] = 0.0048996317295471915; \n                        classes[1] = 0.00468563791270663; \n                    } else {\n                        classes[0] = 0.0009880292962599357; \n                        classes[1] = 0.00038594367892268795; \n                    }\n                } else {\n                    if (features[4] <= 0.0012924940092489123) {\n                        classes[0] = 9.040464540292126e-05; \n                        classes[1] = 0.0; \n                    } else {\n                        classes[0] = 0.0010764354670113753; \n                        classes[1] = 0.0019852039995453628; \n                    }\n                }\n            }\n        } else {\n            if (features[7] <= 0.5) {\n                if (features[3] <= 1.5) {\n                    if (features[1] <= 0.8305147290229797) {\n                        classes[0] = 0.22320465197750755; \n                        classes[1] = 0.11022929124930513; \n                    } else {\n                        classes[0] = 0.10358586070552865; \n                        classes[1] = 0.07092440196186377; \n                    }\n                } else {\n                    if (features[4] <= 0.4825301766395569) {\n                        classes[0] = 0.01803579525819539; \n                        classes[1] = 0.013955239380395768; \n                    } else {\n                        classes[0] = 0.014786959416214824; \n                        classes[1] = 0.017134738280041334; \n                    }\n                }\n            } else {\n                if (features[7] <= 2.5) {\n                    if (features[4] <= 2669.0) {\n                        classes[0] = 0.0444448811273744; \n                        classes[1] = 0.0430462042169407; \n                    } else {\n                        classes[0] = 0.0014136778557533476; \n                        classes[1] = 0.0005540697827371414; \n                    }\n                } else {\n                    if (features[2] <= 23.5) {\n                        classes[0] = 0.0007147817599419827; \n                        classes[1] = 0.00031133311905586544; \n                    } else {\n                        classes[0] = 0.009586021194495304; \n                        classes[1] = 0.013099131349964281; \n                    }\n                }\n            }\n        }\n        return classes;\n    });\n    \n    forest.push(function(features) {\n        var classes = new Array(2);\n        if (features[1] <= 0.13754335045814514) {\n            if (features[9] <= 0.5) {\n                if (features[8] <= 2.5) {\n                    if (features[7] <= 0.5) {\n                        classes[0] = 0.19326915907826442; \n                        classes[1] = 0.06424995053618598; \n                    } else {\n                        classes[0] = 0.005121398064233613; \n                        classes[1] = 0.004905246341833653; \n                    }\n                } else {\n                    if (features[4] <= 0.4659564644098282) {\n                        classes[0] = 0.00568531754548721; \n                        classes[1] = 0.0021757842358235946; \n                    } else {\n                        classes[0] = 0.010289001090662895; \n                        classes[1] = 0.008944483393161404; \n                    }\n                }\n            } else {\n                if (features[0] <= 92589.0) {\n                    if (features[9] <= 2.5) {\n                        classes[0] = 0.0045854819141469645; \n                        classes[1] = 0.005326613785702287; \n                    } else {\n                        classes[0] = 8.265074892449012e-05; \n                        classes[1] = 0.00034787866141238995; \n                    }\n                } else {\n                    if (features[4] <= 227.5) {\n                        classes[0] = 0.0026102475806981146; \n                        classes[1] = 0.002172314730069098; \n                    } else {\n                        classes[0] = 0.0005363041048335791; \n                        classes[1] = 9.268117252181518e-05; \n                    }\n                }\n            }\n        } else {\n            if (features[9] <= 0.5) {\n                if (features[3] <= 0.5) {\n                    if (features[2] <= 53.5) {\n                        classes[0] = 0.1799775835164731; \n                        classes[1] = 0.11356651307665123; \n                    } else {\n                        classes[0] = 0.09030728205454441; \n                        classes[1] = 0.03960742349870413; \n                    }\n                } else {\n                    if (features[1] <= 1.009725570678711) {\n                        classes[0] = 0.08856580697347889; \n                        classes[1] = 0.06735255205219548; \n                    } else {\n                        classes[0] = 0.006311134130397423; \n                        classes[1] = 0.008423216173201896; \n                    }\n                }\n            } else {\n                if (features[4] <= 0.6622037887573242) {\n                    if (features[9] <= 1.5) {\n                        classes[0] = 0.025143899098152244; \n                        classes[1] = 0.021981759138323474; \n                    } else {\n                        classes[0] = 0.00856769712135703; \n                        classes[1] = 0.01046787986499627; \n                    }\n                } else {\n                    if (features[5] <= 899.0) {\n                        classes[0] = 0.000999099341380636; \n                        classes[1] = 0.00041744841466278204; \n                    } else {\n                        classes[0] = 0.011525752687565621; \n                        classes[1] = 0.016390439873986848; \n                    }\n                }\n            }\n        }\n        return classes;\n    });\n    \n    forest.push(function(features) {\n        var classes = new Array(2);\n        if (features[1] <= 0.7734005749225616) {\n            if (features[3] <= 0.5) {\n                if (features[6] <= 8.5) {\n                    if (features[2] <= 54.5) {\n                        classes[0] = 0.11445571397362693; \n                        classes[1] = 0.05314828564819715; \n                    } else {\n                        classes[0] = 0.07768281411985532; \n                        classes[1] = 0.02014409041112093; \n                    }\n                } else {\n                    if (features[4] <= 0.4301162511110306) {\n                        classes[0] = 0.08212870766713885; \n                        classes[1] = 0.038303175310710605; \n                    } else {\n                        classes[0] = 0.08240740986547297; \n                        classes[1] = 0.056477899636866793; \n                    }\n                }\n            } else {\n                if (features[3] <= 2.5) {\n                    if (features[7] <= 0.5) {\n                        classes[0] = 0.07260481539170088; \n                        classes[1] = 0.04688535765386613; \n                    } else {\n                        classes[0] = 0.008899651620797965; \n                        classes[1] = 0.008674125849275979; \n                    }\n                } else {\n                    if (features[4] <= 0.6107728481292725) {\n                        classes[0] = 0.007202319595006308; \n                        classes[1] = 0.006651665030143215; \n                    } else {\n                        classes[0] = 0.003399666394830662; \n                        classes[1] = 0.004809846133971991; \n                    }\n                }\n            }\n        } else {\n            if (features[1] <= 1.0010430812835693) {\n                if (features[3] <= 1.5) {\n                    if (features[2] <= 63.5) {\n                        classes[0] = 0.11612467663226808; \n                        classes[1] = 0.08913445574469933; \n                    } else {\n                        classes[0] = 0.013580132273721244; \n                        classes[1] = 0.00550532281729606; \n                    }\n                } else {\n                    if (features[4] <= 0.5036571621894836) {\n                        classes[0] = 0.012596289493581185; \n                        classes[1] = 0.011694880839107118; \n                    } else {\n                        classes[0] = 0.008472419312525048; \n                        classes[1] = 0.011240139005517376; \n                    }\n                }\n            } else {\n                if (features[1] <= 2.05238938331604) {\n                    if (features[6] <= 9.5) {\n                        classes[0] = 0.015988668601338955; \n                        classes[1] = 0.01989058220108311; \n                    } else {\n                        classes[0] = 0.0026831655478182104; \n                        classes[1] = 0.005709080903657166; \n                    }\n                } else {\n                    if (features[5] <= 6112.5) {\n                        classes[0] = 0.0008397112780558026; \n                        classes[1] = 0.0007429067405670609; \n                    } else {\n                        classes[0] = 0.0017274100462031686; \n                        classes[1] = 0.0001946142599957981; \n                    }\n                }\n            }\n        }\n        return classes;\n    });\n    \n    forest.push(function(features) {\n        var classes = new Array(2);\n        if (features[1] <= 0.11458282172679901) {\n            if (features[7] <= 0.5) {\n                if (features[2] <= 34.5) {\n                    if (features[10] <= 0.5) {\n                        classes[0] = 0.012234456158167118; \n                        classes[1] = 0.0078014218695471975; \n                    } else {\n                        classes[0] = 0.003694889009617228; \n                        classes[1] = 0.00457944352689917; \n                    }\n                } else {\n                    if (features[6] <= 13.5) {\n                        classes[0] = 0.1437878467604068; \n                        classes[1] = 0.05223139652670885; \n                    } else {\n                        classes[0] = 0.028246656805008145; \n                        classes[1] = 0.017401711583506525; \n                    }\n                }\n            } else {\n                if (features[7] <= 1.5) {\n                    if (features[4] <= 441.5) {\n                        classes[0] = 0.004495614419066122; \n                        classes[1] = 0.004808444418781315; \n                    } else {\n                        classes[0] = 0.0008483866936071534; \n                        classes[1] = 0.0003637034450032787; \n                    }\n                } else {\n                    if (features[2] <= 50.5) {\n                        classes[0] = 0.0005652095608592933; \n                        classes[1] = 0.0014320975294589895; \n                    } else {\n                        classes[0] = 0.0005215348389018297; \n                        classes[1] = 0.0005246295479922525; \n                    }\n                }\n            }\n        } else {\n            if (features[7] <= 0.5) {\n                if (features[8] <= 3.5) {\n                    if (features[9] <= 0.5) {\n                        classes[0] = 0.3203945693958784; \n                        classes[1] = 0.20021281725267784; \n                    } else {\n                        classes[0] = 0.027248650710573127; \n                        classes[1] = 0.027534500643700294; \n                    }\n                } else {\n                    if (features[4] <= 1.0836857557296753) {\n                        classes[0] = 0.007124283420941909; \n                        classes[1] = 0.007620708455100159; \n                    } else {\n                        classes[0] = 0.002571685547024234; \n                        classes[1] = 0.006166789919230995; \n                    }\n                }\n            } else {\n                if (features[7] <= 2.5) {\n                    if (features[4] <= 2669.0) {\n                        classes[0] = 0.04532354399368469; \n                        classes[1] = 0.04583225078489508; \n                    } else {\n                        classes[0] = 0.0013729806301932008; \n                        classes[1] = 0.0005987776543170181; \n                    }\n                } else {\n                    if (features[2] <= 23.5) {\n                        classes[0] = 0.00071364792075371; \n                        classes[1] = 0.00033358321609921175; \n                    } else {\n                        classes[0] = 0.009955867164730611; \n                        classes[1] = 0.0134579005967915; \n                    }\n                }\n            }\n        }\n        return classes;\n    });\n    \n    forest.push(function(features) {\n        var classes = new Array(2);\n        if (features[1] <= 0.7734005749225616) {\n            if (features[2] <= 59.5) {\n                if (features[6] <= 13.5) {\n                    if (features[9] <= 0.5) {\n                        classes[0] = 0.2332988204205296; \n                        classes[1] = 0.13339781460198352; \n                    } else {\n                        classes[0] = 0.0160550369472505; \n                        classes[1] = 0.016915481543446315; \n                    }\n                } else {\n                    if (features[4] <= 0.5647917985916138) {\n                        classes[0] = 0.030018554361442285; \n                        classes[1] = 0.022326571086071563; \n                    } else {\n                        classes[0] = 0.01930373402896349; \n                        classes[1] = 0.02187619341591261; \n                    }\n                }\n            } else {\n                if (features[3] <= 0.5) {\n                    if (features[6] <= 6.5) {\n                        classes[0] = 0.03622019336776005; \n                        classes[1] = 0.00995204633955477; \n                    } else {\n                        classes[0] = 0.07083256143023353; \n                        classes[1] = 0.032873388716493424; \n                    }\n                } else {\n                    if (features[2] <= 81.5) {\n                        classes[0] = 0.02107149766748388; \n                        classes[1] = 0.013024114603225608; \n                    } else {\n                        classes[0] = 0.0012422479120923746; \n                        classes[1] = 0.0017712247915367568; \n                    }\n                }\n            }\n        } else {\n            if (features[1] <= 1.0010430812835693) {\n                if (features[6] <= 12.5) {\n                    if (features[2] <= 62.5) {\n                        classes[0] = 0.12183248275620867; \n                        classes[1] = 0.1001003750391528; \n                    } else {\n                        classes[0] = 0.014693699231967838; \n                        classes[1] = 0.006934424825483038; \n                    }\n                } else {\n                    if (features[4] <= 0.4884297698736191) {\n                        classes[0] = 0.004769238809773497; \n                        classes[1] = 0.003753339155061541; \n                    } else {\n                        classes[0] = 0.007722477024855488; \n                        classes[1] = 0.011706408753055477; \n                    }\n                }\n            } else {\n                if (features[1] <= 2.05238938331604) {\n                    if (features[6] <= 9.5) {\n                        classes[0] = 0.01628642471884878; \n                        classes[1] = 0.02020913471375882; \n                    } else {\n                        classes[0] = 0.002794669339405822; \n                        classes[1] = 0.00564709740826064; \n                    }\n                } else {\n                    if (features[5] <= 4900.0) {\n                        classes[0] = 0.0005944977518704447; \n                        classes[1] = 0.000651906893208603; \n                    } else {\n                        classes[0] = 0.0017899439801340857; \n                        classes[1] = 0.00033439836492740407; \n                    }\n                }\n            }\n        }\n        return classes;\n    });\n    \n    forest.push(function(features) {\n        var classes = new Array(2);\n        if (features[7] <= 0.5) {\n            if (features[2] <= 57.5) {\n                if (features[4] <= 0.42318199574947357) {\n                    if (features[8] <= 0.5) {\n                        classes[0] = 0.10118600634546543; \n                        classes[1] = 0.07532708975894792; \n                    } else {\n                        classes[0] = 0.0972199591593781; \n                        classes[1] = 0.04838321765500371; \n                    }\n                } else {\n                    if (features[6] <= 9.5) {\n                        classes[0] = 0.093460878143383; \n                        classes[1] = 0.06498869852982517; \n                    } else {\n                        classes[0] = 0.0692997826513753; \n                        classes[1] = 0.07257221940930342; \n                    }\n                }\n            } else {\n                if (features[5] <= 6666.5) {\n                    if (features[2] <= 65.5) {\n                        classes[0] = 0.03537746381096445; \n                        classes[1] = 0.026634785063599013; \n                    } else {\n                        classes[0] = 0.03963770281970043; \n                        classes[1] = 0.019084556654662622; \n                    }\n                } else {\n                    if (features[3] <= 0.5) {\n                        classes[0] = 0.07255345614750405; \n                        classes[1] = 0.02530886314174043; \n                    } else {\n                        classes[0] = 0.016118833999743433; \n                        classes[1] = 0.009975139918200501; \n                    }\n                }\n            }\n        } else {\n            if (features[7] <= 1.5) {\n                if (features[4] <= 1946.5) {\n                    if (features[4] <= 0.3699193447828293) {\n                        classes[0] = 0.02269254244805144; \n                        classes[1] = 0.020296636130247906; \n                    } else {\n                        classes[0] = 0.01575392045187768; \n                        classes[1] = 0.01880866323567304; \n                    }\n                } else {\n                    if (features[0] <= 143087.5) {\n                        classes[0] = 0.0020357772320463196; \n                        classes[1] = 0.0007533175000564911; \n                    } else {\n                        classes[0] = 8.91167722338558e-05; \n                        classes[1] = 0.0002259939545910885; \n                    }\n                }\n            } else {\n                if (features[4] <= 0.0011009315494447947) {\n                    if (features[2] <= 52.5) {\n                        classes[0] = 0.002879860809588384; \n                        classes[1] = 0.0019084348873441227; \n                    } else {\n                        classes[0] = 0.00014867416794038014; \n                        classes[1] = 0.0005100601912775874; \n                    }\n                } else {\n                    if (features[0] <= 20841.5) {\n                        classes[0] = 0.0035420111339141648; \n                        classes[1] = 0.0033232902540816086; \n                    } else {\n                        classes[0] = 0.016905533291259874; \n                        classes[1] = 0.022997514331016072; \n                    }\n                }\n            }\n        }\n        return classes;\n    });\n    \n    forest.push(function(features) {\n        var classes = new Array(2);\n        if (features[3] <= 0.5) {\n            if (features[1] <= 0.11458282172679901) {\n                if (features[2] <= 34.5) {\n                    if (features[10] <= 0.5) {\n                        classes[0] = 0.010523542877185385; \n                        classes[1] = 0.007149039421735331; \n                    } else {\n                        classes[0] = 0.0031655172699309657; \n                        classes[1] = 0.004497022935454874; \n                    }\n                } else {\n                    if (features[8] <= 1.5) {\n                        classes[0] = 0.1007499963243704; \n                        classes[1] = 0.04105755078547157; \n                    } else {\n                        classes[0] = 0.03812525431990766; \n                        classes[1] = 0.024675108422937318; \n                    }\n                }\n            } else {\n                if (features[8] <= 3.5) {\n                    if (features[5] <= 5559.5) {\n                        classes[0] = 0.1277044363515612; \n                        classes[1] = 0.10540256501457937; \n                    } else {\n                        classes[0] = 0.14279293242900837; \n                        classes[1] = 0.08693300645801676; \n                    }\n                } else {\n                    if (features[4] <= 0.6805424392223358) {\n                        classes[0] = 0.003502710234277828; \n                        classes[1] = 0.0034926910928587173; \n                    } else {\n                        classes[0] = 0.00338030718387138; \n                        classes[1] = 0.0065417458460337915; \n                    }\n                }\n            }\n        } else {\n            if (features[3] <= 2.5) {\n                if (features[9] <= 1.5) {\n                    if (features[2] <= 55.5) {\n                        classes[0] = 0.08530598259200947; \n                        classes[1] = 0.07748413549718362; \n                    } else {\n                        classes[0] = 0.03631782706131048; \n                        classes[1] = 0.025887638010369928; \n                    }\n                } else {\n                    if (features[0] <= 9317.5) {\n                        classes[0] = 0.000556547973424796; \n                        classes[1] = 0.00020198638648674785; \n                    } else {\n                        classes[0] = 0.004327181490024383; \n                        classes[1] = 0.006965357879820373; \n                    }\n                }\n            } else {\n                if (features[5] <= 6618.0) {\n                    if (features[0] <= 15134.5) {\n                        classes[0] = 0.0016246850868784322; \n                        classes[1] = 0.0012739119626086768; \n                    } else {\n                        classes[0] = 0.010555161271969083; \n                        classes[1] = 0.015958266650831856; \n                    }\n                } else {\n                    if (features[2] <= 22.5) {\n                        classes[0] = 0.00038132812476716855; \n                        classes[1] = 5.687866040152082e-05; \n                    } else {\n                        classes[0] = 0.01114684517428943; \n                        classes[1] = 0.012262839210406173; \n                    }\n                }\n            }\n        }\n        return classes;\n    });\n    \n    forest.push(function(features) {\n        var classes = new Array(2);\n        if (features[1] <= 0.7734005749225616) {\n            if (features[9] <= 0.5) {\n                if (features[6] <= 8.5) {\n                    if (features[7] <= 0.5) {\n                        classes[0] = 0.1821243245209813; \n                        classes[1] = 0.09466565465862806; \n                    } else {\n                        classes[0] = 0.008685594775223128; \n                        classes[1] = 0.009621302020012056; \n                    }\n                } else {\n                    if (features[8] <= 4.5) {\n                        classes[0] = 0.18428744544956857; \n                        classes[1] = 0.13357259262417343; \n                    } else {\n                        classes[0] = 0.0051657153235957105; \n                        classes[1] = 0.007964462848735171; \n                    }\n                }\n            } else {\n                if (features[6] <= 6.5) {\n                    if (features[3] <= 3.5) {\n                        classes[0] = 0.00745853779531873; \n                        classes[1] = 0.009689438416276525; \n                    } else {\n                        classes[0] = 5.796469375984638e-05; \n                        classes[1] = 0.00043915190462220086; \n                    }\n                } else {\n                    if (features[5] <= 5284.0) {\n                        classes[0] = 0.006183377159462878; \n                        classes[1] = 0.007330523099630438; \n                    } else {\n                        classes[0] = 0.010712967995803; \n                        classes[1] = 0.008877178353104524; \n                    }\n                }\n            }\n        } else {\n            if (features[1] <= 1.0010430812835693) {\n                if (features[6] <= 8.5) {\n                    if (features[2] <= 68.5) {\n                        classes[0] = 0.10576100495285427; \n                        classes[1] = 0.08906208151455432; \n                    } else {\n                        classes[0] = 0.005830122672802274; \n                        classes[1] = 0.0021029096472431987; \n                    }\n                } else {\n                    if (features[4] <= 0.5036200284957886) {\n                        classes[0] = 0.015478769549479476; \n                        classes[1] = 0.012954740854859537; \n                    } else {\n                        classes[0] = 0.018952189515020746; \n                        classes[1] = 0.02416836605764456; \n                    }\n                }\n            } else {\n                if (features[1] <= 2.05238938331604) {\n                    if (features[0] <= 144928.5) {\n                        classes[0] = 0.01897959415770012; \n                        classes[1] = 0.0247720997282727; \n                    } else {\n                        classes[0] = 0.0003932245982045701; \n                        classes[1] = 0.0014657192934880374; \n                    }\n                } else {\n                    if (features[5] <= 6112.5) {\n                        classes[0] = 0.0008198774252108288; \n                        classes[1] = 0.0007972129841372817; \n                    } else {\n                        classes[0] = 0.0013804056300784659; \n                        classes[1] = 0.0002454497795695016; \n                    }\n                }\n            }\n        }\n        return classes;\n    });\n    \n    forest.push(function(features) {\n        var classes = new Array(2);\n        if (features[3] <= 0.5) {\n            if (features[2] <= 59.5) {\n                if (features[8] <= 4.5) {\n                    if (features[5] <= 6584.5) {\n                        classes[0] = 0.1628871965006312; \n                        classes[1] = 0.13770981914661942; \n                    } else {\n                        classes[0] = 0.13822760502855252; \n                        classes[1] = 0.08823570986637094; \n                    }\n                } else {\n                    if (features[4] <= 4.644721746444702) {\n                        classes[0] = 0.002744119343843483; \n                        classes[1] = 0.005984391944877395; \n                    } else {\n                        classes[0] = 0.0005163170215568798; \n                        classes[1] = 0.0003706275260451128; \n                    }\n                }\n            } else {\n                if (features[5] <= 3749.5) {\n                    if (features[6] <= 7.5) {\n                        classes[0] = 0.01348043125904451; \n                        classes[1] = 0.00745452224675211; \n                    } else {\n                        classes[0] = 0.010868866575283158; \n                        classes[1] = 0.01091295787566836; \n                    }\n                } else {\n                    if (features[6] <= 14.5) {\n                        classes[0] = 0.07325671183927945; \n                        classes[1] = 0.03071649159480011; \n                    } else {\n                        classes[0] = 0.013908792496732023; \n                        classes[1] = 0.010699749243487775; \n                    }\n                }\n            }\n        } else {\n            if (features[3] <= 1.5) {\n                if (features[1] <= 0.8820598125457764) {\n                    if (features[5] <= 7505.0) {\n                        classes[0] = 0.047869376345310695; \n                        classes[1] = 0.04082486679107084; \n                    } else {\n                        classes[0] = 0.017607880213359184; \n                        classes[1] = 0.011182000913800165; \n                    }\n                } else {\n                    if (features[4] <= 0.019898786209523678) {\n                        classes[0] = 0.0017425730564700093; \n                        classes[1] = 0.0009099020104367777; \n                    } else {\n                        classes[0] = 0.02601655428593621; \n                        classes[1] = 0.027819751903970725; \n                    }\n                }\n            } else {\n                if (features[4] <= 0.4825301766395569) {\n                    if (features[5] <= 12375.0) {\n                        classes[0] = 0.02867152158275879; \n                        classes[1] = 0.02955741911487295; \n                    } else {\n                        classes[0] = 0.003166242889772456; \n                        classes[1] = 0.0017254463981882088; \n                    }\n                } else {\n                    if (features[5] <= 1134.5) {\n                        classes[0] = 0.00138115063291048; \n                        classes[1] = 0.000634508964352062; \n                    } else {\n                        classes[0] = 0.02281535451021077; \n                        classes[1] = 0.030101140877025066; \n                    }\n                }\n            }\n        }\n        return classes;\n    });\n    \n    forest.push(function(features) {\n        var classes = new Array(2);\n        if (features[7] <= 0.5) {\n            if (features[1] <= 0.11458282172679901) {\n                if (features[5] <= 3498.5) {\n                    if (features[6] <= 7.5) {\n                        classes[0] = 0.016503632624083303; \n                        classes[1] = 0.010780898459400029; \n                    } else {\n                        classes[0] = 0.01291098935558572; \n                        classes[1] = 0.01411444714058909; \n                    }\n                } else {\n                    if (features[8] <= 2.5) {\n                        classes[0] = 0.12009834715897888; \n                        classes[1] = 0.06195914502728563; \n                    } else {\n                        classes[0] = 0.012493311163701261; \n                        classes[1] = 0.011938457158615391; \n                    }\n                }\n            } else {\n                if (features[4] <= 0.5085816383361816) {\n                    if (features[5] <= 5510.5) {\n                        classes[0] = 0.09565635448899418; \n                        classes[1] = 0.08176348207987308; \n                    } else {\n                        classes[0] = 0.10540327975608203; \n                        classes[1] = 0.06691591749675109; \n                    }\n                } else {\n                    if (features[4] <= 824.5) {\n                        classes[0] = 0.09490004606546591; \n                        classes[1] = 0.09936066832725306; \n                    } else {\n                        classes[0] = 0.03669430842964213; \n                        classes[1] = 0.023518996969696858; \n                    }\n                }\n            }\n        } else {\n            if (features[4] <= 0.12271276861429214) {\n                if (features[10] <= 1.5) {\n                    if (features[4] <= 0.1196901835501194) {\n                        classes[0] = 0.012980216065526406; \n                        classes[1] = 0.011556193984960312; \n                    } else {\n                        classes[0] = 0.0003849015386636832; \n                        classes[1] = 0.0001012020127873957; \n                    }\n                } else {\n                    if (features[4] <= 0.019360308535397053) {\n                        classes[0] = 0.001721363160683347; \n                        classes[1] = 0.0014392186484366186; \n                    } else {\n                        classes[0] = 0.002479479618501282; \n                        classes[1] = 0.0036648042925540784; \n                    }\n                }\n            } else {\n                if (features[7] <= 3.5) {\n                    if (features[4] <= 2564.0) {\n                        classes[0] = 0.04161791147923719; \n                        classes[1] = 0.04754643193027986; \n                    } else {\n                        classes[0] = 0.0017320335484612675; \n                        classes[1] = 0.0010578683659538232; \n                    }\n                } else {\n                    if (features[5] <= 1512.5) {\n                        classes[0] = 0.0003122683981700351; \n                        classes[1] = 0.00017779104276436443; \n                    } else {\n                        classes[0] = 0.0028150286555979525; \n                        classes[1] = 0.005401005555449306; \n                    }\n                }\n            }\n        }\n        return classes;\n    });\n    \n    forest.push(function(features) {\n        var classes = new Array(2);\n        if (features[9] <= 0.5) {\n            if (features[2] <= 57.5) {\n                if (features[6] <= 13.5) {\n                    if (features[1] <= 0.8704195022583008) {\n                        classes[0] = 0.21736569588750912; \n                        classes[1] = 0.15831090984214877; \n                    } else {\n                        classes[0] = 0.08642239085771765; \n                        classes[1] = 0.08298834521863646; \n                    }\n                } else {\n                    if (features[4] <= 0.6789253652095795) {\n                        classes[0] = 0.03150534790797438; \n                        classes[1] = 0.030028828154991107; \n                    } else {\n                        classes[0] = 0.014829598256644197; \n                        classes[1] = 0.020977835066887714; \n                    }\n                }\n            } else {\n                if (features[5] <= 6666.5) {\n                    if (features[2] <= 63.5) {\n                        classes[0] = 0.02697746961320328; \n                        classes[1] = 0.024162970443263918; \n                    } else {\n                        classes[0] = 0.043082824685859826; \n                        classes[1] = 0.026197993322387543; \n                    }\n                } else {\n                    if (features[6] <= 14.5) {\n                        classes[0] = 0.06303130164489869; \n                        classes[1] = 0.030332872028483664; \n                    } else {\n                        classes[0] = 0.015352201634641436; \n                        classes[1] = 0.01157685485263748; \n                    }\n                }\n            }\n        } else {\n            if (features[5] <= 899.0) {\n                if (features[0] <= 81753.5) {\n                    if (features[0] <= 79701.0) {\n                        classes[0] = 0.00081716283070297; \n                        classes[1] = 0.0006148577718977492; \n                    } else {\n                        classes[0] = 0.0; \n                        classes[1] = 0.00011866737048774103; \n                    }\n                } else {\n                    if (features[2] <= 32.5) {\n                        classes[0] = 0.00035540582589642004; \n                        classes[1] = 0.0; \n                    } else {\n                        classes[0] = 0.0003863244251788535; \n                        classes[1] = 0.00016735531965998048; \n                    }\n                }\n            } else {\n                if (features[4] <= 0.6646689176559448) {\n                    if (features[1] <= 0.14526984840631485) {\n                        classes[0] = 0.005512724467115752; \n                        classes[1] = 0.007944730907171235; \n                    } else {\n                        classes[0] = 0.03346274428427376; \n                        classes[1] = 0.03458195410143609; \n                    }\n                } else {\n                    if (features[0] <= 123620.5) {\n                        classes[0] = 0.011747391017047016; \n                        classes[1] = 0.014962824877912416; \n                    } else {\n                        classes[0] = 0.002032006031044545; \n                        classes[1] = 0.0041524113522893496; \n                    }\n                }\n            }\n        }\n        return classes;\n    });\n    \n    forest.push(function(features) {\n        var classes = new Array(2);\n        if (features[3] <= 0.5) {\n            if (features[2] <= 48.5) {\n                if (features[6] <= 15.5) {\n                    if (features[1] <= 0.8487764298915863) {\n                        classes[0] = 0.1266663794980627; \n                        classes[1] = 0.09671145666380468; \n                    } else {\n                        classes[0] = 0.05550265147949145; \n                        classes[1] = 0.055077443983967446; \n                    }\n                } else {\n                    if (features[1] <= 0.036849236115813255) {\n                        classes[0] = 0.001513960587680031; \n                        classes[1] = 0.0009112246546148542; \n                    } else {\n                        classes[0] = 0.008121626904732168; \n                        classes[1] = 0.012972116953055531; \n                    }\n                }\n            } else {\n                if (features[5] <= 6666.5) {\n                    if (features[6] <= 12.5) {\n                        classes[0] = 0.0769506746659673; \n                        classes[1] = 0.0554072341346502; \n                    } else {\n                        classes[0] = 0.019011666524050702; \n                        classes[1] = 0.02091219957017603; \n                    }\n                } else {\n                    if (features[7] <= 0.5) {\n                        classes[0] = 0.10694911260588742; \n                        classes[1] = 0.05829317537262928; \n                    } else {\n                        classes[0] = 0.005365998518619619; \n                        classes[1] = 0.00594504611991433; \n                    }\n                }\n            }\n        } else {\n            if (features[3] <= 2.5) {\n                if (features[9] <= 1.5) {\n                    if (features[4] <= 0.7342306673526764) {\n                        classes[0] = 0.08873289633945944; \n                        classes[1] = 0.07744374307383652; \n                    } else {\n                        classes[0] = 0.02964486811236854; \n                        classes[1] = 0.03185948046882635; \n                    }\n                } else {\n                    if (features[0] <= 9317.5) {\n                        classes[0] = 0.0005455332255449892; \n                        classes[1] = 0.0002162940091969493; \n                    } else {\n                        classes[0] = 0.004527403850754209; \n                        classes[1] = 0.0068721124784406964; \n                    }\n                }\n            } else {\n                if (features[1] <= 1.0363723635673523) {\n                    if (features[0] <= 21907.0) {\n                        classes[0] = 0.003553348283009548; \n                        classes[1] = 0.0030328304054140945; \n                    } else {\n                        classes[0] = 0.01877126500979887; \n                        classes[1] = 0.023631176264450784; \n                    }\n                } else {\n                    if (features[0] <= 139943.5) {\n                        classes[0] = 0.0017071805199281235; \n                        classes[1] = 0.0028189338876637806; \n                    } else {\n                        classes[0] = 0.0; \n                        classes[1] = 0.00033096583400371663; \n                    }\n                }\n            }\n        }\n        return classes;\n    });\n    \n    forest.push(function(features) {\n        var classes = new Array(2);\n        if (features[9] <= 0.5) {\n            if (features[2] <= 54.5) {\n                if (features[6] <= 10.5) {\n                    if (features[5] <= 7545.5) {\n                        classes[0] = 0.19247779698198; \n                        classes[1] = 0.16656234658356833; \n                    } else {\n                        classes[0] = 0.04096521651720532; \n                        classes[1] = 0.02484072596302077; \n                    }\n                } else {\n                    if (features[4] <= 0.6761254966259003) {\n                        classes[0] = 0.054087559158429166; \n                        classes[1] = 0.050534153571792625; \n                    } else {\n                        classes[0] = 0.024147306213155403; \n                        classes[1] = 0.03095198013930866; \n                    }\n                }\n            } else {\n                if (features[6] <= 8.5) {\n                    if (features[3] <= 0.5) {\n                        classes[0] = 0.07199033501965825; \n                        classes[1] = 0.037444892629942904; \n                    } else {\n                        classes[0] = 0.014053843562646058; \n                        classes[1] = 0.012294314467028297; \n                    }\n                } else {\n                    if (features[5] <= 6666.5) {\n                        classes[0] = 0.03999097079977581; \n                        classes[1] = 0.036963795405592643; \n                    } else {\n                        classes[0] = 0.05069650537725424; \n                        classes[1] = 0.03522022955032006; \n                    }\n                }\n            }\n        } else {\n            if (features[9] <= 1.5) {\n                if (features[5] <= 992.0) {\n                    if (features[6] <= 20.0) {\n                        classes[0] = 0.000981049160907815; \n                        classes[1] = 0.000378845080870787; \n                    } else {\n                        classes[0] = 1.2247322776216824e-05; \n                        classes[1] = 5.4389168633201835e-05; \n                    }\n                } else {\n                    if (features[5] <= 12170.5) {\n                        classes[0] = 0.037807456216533204; \n                        classes[1] = 0.04248639208552684; \n                    } else {\n                        classes[0] = 0.0022991576304087604; \n                        classes[1] = 0.0015180380840195812; \n                    }\n                }\n            } else {\n                if (features[5] <= 23510.0) {\n                    if (features[0] <= 41036.5) {\n                        classes[0] = 0.004297038125347292; \n                        classes[1] = 0.004575836565023039; \n                    } else {\n                        classes[0] = 0.00902016455523762; \n                        classes[1] = 0.013200386473853232; \n                    }\n                } else {\n                    if (features[8] <= 0.5) {\n                        classes[0] = 5.41023010711905e-05; \n                        classes[1] = 0.0; \n                    } else {\n                        classes[0] = 9.292528910976833e-05; \n                        classes[1] = 0.0; \n                    }\n                }\n            }\n        }\n        return classes;\n    });\n    \n    forest.push(function(features) {\n        var classes = new Array(2);\n        if (features[7] <= 0.5) {\n            if (features[8] <= 3.5) {\n                if (features[1] <= 0.09746037051081657) {\n                    if (features[1] <= 2.519999998185085e-05) {\n                        classes[0] = 0.02353372163556821; \n                        classes[1] = 0.02248337233665457; \n                    } else {\n                        classes[0] = 0.11436941473577121; \n                        classes[1] = 0.07068812461781611; \n                    }\n                } else {\n                    if (features[1] <= 1.009725570678711) {\n                        classes[0] = 0.3101631393288383; \n                        classes[1] = 0.26078459093582496; \n                    } else {\n                        classes[0] = 0.011626992109249487; \n                        classes[1] = 0.015256390903743738; \n                    }\n                }\n            } else {\n                if (features[4] <= 0.6336877942085266) {\n                    if (features[0] <= 142218.5) {\n                        classes[0] = 0.0063685432190936486; \n                        classes[1] = 0.005604683905846693; \n                    } else {\n                        classes[0] = 0.00031467178208730706; \n                        classes[1] = 0.0009311902340401467; \n                    }\n                } else {\n                    if (features[4] <= 4.836538791656494) {\n                        classes[0] = 0.005809664441880468; \n                        classes[1] = 0.011422455295195116; \n                    } else {\n                        classes[0] = 0.0023831138922684714; \n                        classes[1] = 0.0024426666252185853; \n                    }\n                }\n            }\n        } else {\n            if (features[0] <= 640.5) {\n                if (features[4] <= 583.5) {\n                    if (features[5] <= 11596.5) {\n                        classes[0] = 0.0003814303758894031; \n                        classes[1] = 2.4054909879332828e-05; \n                    } else {\n                        classes[0] = 0.0; \n                        classes[1] = 1.974476934709123e-05; \n                    }\n                } else {\n                    if (features[1] <= 0.6865776777267456) {\n                        classes[0] = 1.3126664643602775e-05; \n                        classes[1] = 0.0; \n                    } else {\n                        classes[0] = 0.0; \n                        classes[1] = 5.4061872805898e-05; \n                    }\n                }\n            } else {\n                if (features[7] <= 1.5) {\n                    if (features[4] <= 1946.5) {\n                        classes[0] = 0.03798454994921546; \n                        classes[1] = 0.0413428778558677; \n                    } else {\n                        classes[0] = 0.0020073829457680843; \n                        classes[1] = 0.001018731994719731; \n                    }\n                } else {\n                    if (features[1] <= 0.16059619933366776) {\n                        classes[0] = 0.001194308157513916; \n                        classes[1] = 0.0023784230432774755; \n                    } else {\n                        classes[0] = 0.022486332957139456; \n                        classes[1] = 0.026912238504840386; \n                    }\n                }\n            }\n        }\n        return classes;\n    });\n    \n    forest.push(function(features) {\n        var classes = new Array(2);\n        if (features[9] <= 0.5) {\n            if (features[2] <= 59.5) {\n                if (features[6] <= 8.5) {\n                    if (features[8] <= 0.5) {\n                        classes[0] = 0.1130562463392108; \n                        classes[1] = 0.10351605663757786; \n                    } else {\n                        classes[0] = 0.09927776874591993; \n                        classes[1] = 0.06937679485648518; \n                    }\n                } else {\n                    if (features[4] <= 0.5687842071056366) {\n                        classes[0] = 0.09113103265703243; \n                        classes[1] = 0.08099346862019197; \n                    } else {\n                        classes[0] = 0.057096468551935224; \n                        classes[1] = 0.06575855646895852; \n                    }\n                }\n            } else {\n                if (features[5] <= 3800.5) {\n                    if (features[2] <= 65.5) {\n                        classes[0] = 0.010290706910827336; \n                        classes[1] = 0.011415052318954328; \n                    } else {\n                        classes[0] = 0.01744291309288754; \n                        classes[1] = 0.01322683999009097; \n                    }\n                } else {\n                    if (features[5] <= 4286.0) {\n                        classes[0] = 0.006555037304123893; \n                        classes[1] = 0.0017196338033337935; \n                    } else {\n                        classes[0] = 0.08513282125340078; \n                        classes[1] = 0.05709626529679909; \n                    }\n                }\n            }\n        } else {\n            if (features[5] <= 258.0) {\n                if (features[2] <= 44.5) {\n                    if (features[2] <= 22.5) {\n                        classes[0] = 6.50370562020238e-05; \n                        classes[1] = 6.094699044907343e-05; \n                    } else {\n                        classes[0] = 0.0003392537587882796; \n                        classes[1] = 0.0; \n                    }\n                } else {\n                    if (features[1] <= 0.2913941890001297) {\n                        classes[0] = 0.00012182413232721741; \n                        classes[1] = 7.497880122989687e-06; \n                    } else {\n                        classes[0] = 0.0001737452288674989; \n                        classes[1] = 0.0002593957497141311; \n                    }\n                }\n            } else {\n                if (features[4] <= 0.6646689176559448) {\n                    if (features[1] <= 0.14526984840631485) {\n                        classes[0] = 0.005601308266298994; \n                        classes[1] = 0.00796974195806922; \n                    } else {\n                        classes[0] = 0.034012168645930374; \n                        classes[1] = 0.03479416197020128; \n                    }\n                } else {\n                    if (features[0] <= 123620.5) {\n                        classes[0] = 0.01235068177286421; \n                        classes[1] = 0.014956070697506076; \n                    } else {\n                        classes[0] = 0.0021783187219581905; \n                        classes[1] = 0.004024184322968963; \n                    }\n                }\n            }\n        }\n        return classes;\n    });\n    \n    forest.push(function(features) {\n        var classes = new Array(2);\n        if (features[1] <= 0.8802691698074341) {\n            if (features[4] <= 0.32039599120616913) {\n                if (features[8] <= 0.5) {\n                    if (features[6] <= 8.5) {\n                        classes[0] = 0.06752228122361521; \n                        classes[1] = 0.05227244293020147; \n                    } else {\n                        classes[0] = 0.02285324670870822; \n                        classes[1] = 0.023988478684444772; \n                    }\n                } else {\n                    if (features[6] <= 14.5) {\n                        classes[0] = 0.0604519687600448; \n                        classes[1] = 0.032021322909145715; \n                    } else {\n                        classes[0] = 0.010465875510088044; \n                        classes[1] = 0.009178898912495596; \n                    }\n                }\n            } else {\n                if (features[4] <= 846.5) {\n                    if (features[5] <= 899.5) {\n                        classes[0] = 0.005608680306598681; \n                        classes[1] = 0.0021564529949549406; \n                    } else {\n                        classes[0] = 0.18481731349777342; \n                        classes[1] = 0.18210429990013; \n                    }\n                } else {\n                    if (features[4] <= 2775.5) {\n                        classes[0] = 0.029775043705371144; \n                        classes[1] = 0.01587323746690477; \n                    } else {\n                        classes[0] = 0.01845183183635976; \n                        classes[1] = 0.01589855173409489; \n                    }\n                }\n            }\n        } else {\n            if (features[6] <= 8.5) {\n                if (features[2] <= 68.5) {\n                    if (features[1] <= 4.079586982727051) {\n                        classes[0] = 0.10116671863376515; \n                        classes[1] = 0.10082347199083995; \n                    } else {\n                        classes[0] = 0.0009095379470104683; \n                        classes[1] = 0.00019837638619761748; \n                    }\n                } else {\n                    if (features[0] <= 5740.5) {\n                        classes[0] = 0.00013733987278941392; \n                        classes[1] = 0.00047211896935883625; \n                    } else {\n                        classes[0] = 0.0046438872091907986; \n                        classes[1] = 0.0021402041919925978; \n                    }\n                }\n            } else {\n                if (features[5] <= 6618.5) {\n                    if (features[6] <= 14.5) {\n                        classes[0] = 0.010635866904005862; \n                        classes[1] = 0.014881155150847246; \n                    } else {\n                        classes[0] = 0.0014753388109834057; \n                        classes[1] = 0.0036301150708227268; \n                    }\n                } else {\n                    if (features[4] <= 0.6340774297714233) {\n                        classes[0] = 0.00759648196090021; \n                        classes[1] = 0.006463415654564118; \n                    } else {\n                        classes[0] = 0.0047089813479675195; \n                        classes[1] = 0.00667706281783393; \n                    }\n                }\n            }\n        }\n        return classes;\n    });\n    \n    forest.push(function(features) {\n        var classes = new Array(2);\n        if (features[7] <= 0.5) {\n            if (features[8] <= 4.5) {\n                if (features[5] <= 6583.5) {\n                    if (features[2] <= 67.5) {\n                        classes[0] = 0.21610479488213186; \n                        classes[1] = 0.20696165250078172; \n                    } else {\n                        classes[0] = 0.026817168381554797; \n                        classes[1] = 0.017901145001706167; \n                    }\n                } else {\n                    if (features[2] <= 35.5) {\n                        classes[0] = 0.019572796063267558; \n                        classes[1] = 0.02180751728052974; \n                    } else {\n                        classes[0] = 0.19498185269313612; \n                        classes[1] = 0.1424135630532752; \n                    }\n                }\n            } else {\n                if (features[4] <= 0.38572125136852264) {\n                    if (features[5] <= 42191.0) {\n                        classes[0] = 0.000501202277340721; \n                        classes[1] = 0.0; \n                    } else {\n                        classes[0] = 0.00015972428152014894; \n                        classes[1] = 0.00037579570547090343; \n                    }\n                } else {\n                    if (features[8] <= 7.5) {\n                        classes[0] = 0.004697163303068371; \n                        classes[1] = 0.007257509031687816; \n                    } else {\n                        classes[0] = 0.00109167886436834; \n                        classes[1] = 0.003062659936348395; \n                    }\n                }\n            }\n        } else {\n            if (features[0] <= 640.5) {\n                if (features[0] <= 189.5) {\n                    if (features[7] <= 1.5) {\n                        classes[0] = 4.382201735227457e-05; \n                        classes[1] = 0.0; \n                    } else {\n                        classes[0] = 0.0; \n                        classes[1] = 3.1407561580834094e-05; \n                    }\n                } else {\n                    if (features[4] <= 583.5) {\n                        classes[0] = 0.00028778741878045824; \n                        classes[1] = 0.0; \n                    } else {\n                        classes[0] = 2.0729940469017916e-06; \n                        classes[1] = 8.96382607591457e-06; \n                    }\n                }\n            } else {\n                if (features[4] <= 0.12271276861429214) {\n                    if (features[5] <= 1652.0) {\n                        classes[0] = 0.001416678500289684; \n                        classes[1] = 0.0021563544754701048; \n                    } else {\n                        classes[0] = 0.01594128839745563; \n                        classes[1] = 0.015085613678652895; \n                    }\n                } else {\n                    if (features[7] <= 3.5) {\n                        classes[0] = 0.04319725803524637; \n                        classes[1] = 0.04943568224571118; \n                    } else {\n                        classes[0] = 0.0032639372194107658; \n                        classes[1] = 0.00542291037373428; \n                    }\n                }\n            }\n        }\n        return classes;\n    });\n    \n    forest.push(function(features) {\n        var classes = new Array(2);\n        if (features[3] <= 0.5) {\n            if (features[6] <= 13.5) {\n                if (features[2] <= 65.5) {\n                    if (features[5] <= 4833.5) {\n                        classes[0] = 0.11262338311598726; \n                        classes[1] = 0.10977056453769173; \n                    } else {\n                        classes[0] = 0.16732842554938754; \n                        classes[1] = 0.12945647253481543; \n                    }\n                } else {\n                    if (features[4] <= 0.32183943688869476) {\n                        classes[0] = 0.022822180884258587; \n                        classes[1] = 0.010243878904841328; \n                    } else {\n                        classes[0] = 0.022611629238921363; \n                        classes[1] = 0.017159850515469706; \n                    }\n                }\n            } else {\n                if (features[4] <= 20.103015899658203) {\n                    if (features[4] <= 0.6798966228961945) {\n                        classes[0] = 0.036483390385389; \n                        classes[1] = 0.037150236553783224; \n                    } else {\n                        classes[0] = 0.010323308268456488; \n                        classes[1] = 0.015510467657763623; \n                    }\n                } else {\n                    if (features[2] <= 42.5) {\n                        classes[0] = 0.0008610317325558081; \n                        classes[1] = 0.0018037862017782234; \n                    } else {\n                        classes[0] = 0.0070349677968098235; \n                        classes[1] = 0.0035867018784582223; \n                    }\n                }\n            }\n        } else {\n            if (features[3] <= 1.5) {\n                if (features[4] <= 0.020816932432353497) {\n                    if (features[0] <= 17975.0) {\n                        classes[0] = 0.0005245089692746002; \n                        classes[1] = 4.9383298580535484e-05; \n                    } else {\n                        classes[0] = 0.003197387462720729; \n                        classes[1] = 0.002133660483817875; \n                    }\n                } else {\n                    if (features[0] <= 135606.5) {\n                        classes[0] = 0.07751289615263386; \n                        classes[1] = 0.07396895850751833; \n                    } else {\n                        classes[0] = 0.008128246154905604; \n                        classes[1] = 0.010444916390589833; \n                    }\n                }\n            } else {\n                if (features[1] <= 0.007018525619059801) {\n                    if (features[0] <= 131554.5) {\n                        classes[0] = 0.001892645382741918; \n                        classes[1] = 0.0036253890968150487; \n                    } else {\n                        classes[0] = 0.0002471157812106904; \n                        classes[1] = 1.9955471617023207e-05; \n                    }\n                } else {\n                    if (features[8] <= 3.5) {\n                        classes[0] = 0.05178793907391922; \n                        classes[1] = 0.057095075374737965; \n                    } else {\n                        classes[0] = 0.0016359882437001197; \n                        classes[1] = 0.002965658398857492; \n                    }\n                }\n            }\n        }\n        return classes;\n    });\n    \n    this.predict = function(features) {\n        var n_estimators = forest.length;\n        var preds = new Array(n_estimators);\n        var n_classes = 2;\n        var classes = new Array(n_classes).fill(0.);\n        var normalizer, sum;\n        var i, j;\n    \n        for (i = 0; i < n_estimators; i++) {\n            preds[i] = forest[i](features);\n        }\n        for (i = 0; i < n_estimators; i++) {\n            normalizer = 0.;\n            for (j = 0; j < n_classes; j++) {\n                normalizer += preds[i][j];\n            }\n            if (normalizer == 0.) {\n                normalizer = 1.0;\n            }\n            for (j = 0; j < n_classes; j++) {\n                preds[i][j] = preds[i][j] / normalizer;\n                if (preds[i][j] <= 2.2204460492503131e-16) {\n                    preds[i][j] = 2.2204460492503131e-16;\n                }\n                preds[i][j] = Math.log(preds[i][j]);\n            }\n            sum = 0.0;\n            for (j = 0; j < n_classes; j++) {\n                sum += preds[i][j];\n            }\n            for (j = 0; j < n_classes; j++) {\n                preds[i][j] = (n_classes - 1) * (preds[i][j] - (1. / n_classes) * sum);\n            }\n        }\n        for (i = 0; i < n_estimators; i++) {\n            for (j = 0; j < n_classes; j++) {\n                classes[j] += preds[i][j];\n            }\n        }\n    \n        // return findMax(classes);\n        return classes[0] * 0.03;\n    };\n};\n\nexport default function _predict(features) {\n    // Prediction:\n    var clf = new AdaBoostClassifier();\n    var prediction = clf.predict(features);\n    console.log(prediction);\n    return prediction;\n}\n\n// if (typeof process !== 'undefined' && typeof process.argv !== 'undefined') {\n//     if (process.argv.length - 2 === 11) {\n//\n//         // Features:\n//         var features = process.argv.slice(2);\n//\n//         // Prediction:\n//         var clf = new AdaBoostClassifier();\n//         var prediction = clf.predict(features);\n//         console.log(prediction);\n//\n//     }\n// }","<template>\n    <v-app>\n        <v-app-bar\n                app\n                color=\"primary\"\n                dark\n        >\n            <div class=\"d-flex align-center\">\n                <v-icon large >mdi-finance</v-icon>\n                <v-toolbar-title>Model Demo</v-toolbar-title>\n            </div>\n\n            <v-spacer></v-spacer>\n        </v-app-bar>\n\n        <v-main>\n            <v-card-text>\n                <v-row>\n                    <v-col class=\"pr-4\">\n                        <v-slider @input=\"rerender\" class=\"align-center\"\n                                  hide-details label=\"Revolving Utilization Of Unsecured Lines\"\n                                  v-model=\"RevolvingUtilizationOfUnsecuredLines\">\n                            <template v-slot:append>\n                                <v-text-field class=\"mt-0 pt-0\" hide-details single-line style=\"width: 60px\"\n                                              type=\"number\" v-model=\"RevolvingUtilizationOfUnsecuredLines\"\n                                ></v-text-field>\n                            </template>\n                        </v-slider>\n                    </v-col>\n                </v-row>\n                <v-row>\n                    <v-col class=\"pr-4\">\n                        <v-slider @input=\"rerender\" class=\"align-center\" hide-details label=\"Age\"\n                                  v-model=\"Age\">\n                            <template v-slot:append>\n                                <v-text-field class=\"mt-0 pt-0\" hide-details single-line style=\"width: 60px\"\n                                              type=\"number\" v-model=\"Age\"></v-text-field>\n                            </template>\n                        </v-slider>\n                    </v-col>\n                </v-row>\n                <v-row>\n                    <v-col class=\"pr-4\">\n                        <v-slider @input=\"rerender\" class=\"align-center\"\n                                  hide-details label=\"Number Of Time 30-59 Days Past Due Not Worse\"\n                                  v-model=\"NumberOfTime30_59DaysPastDueNotWorse\">\n                            <template v-slot:append>\n                                <v-text-field class=\"mt-0 pt-0\" hide-details single-line style=\"width: 60px\"\n                                              type=\"number\"\n                                              v-model=\"NumberOfTime30_59DaysPastDueNotWorse\"></v-text-field>\n                            </template>\n                        </v-slider>\n                    </v-col>\n                </v-row>\n                <v-row>\n                    <v-col class=\"pr-4\">\n                        <v-slider @input=\"rerender\" class=\"align-center\" hide-details\n                                  label=\"Debt Ratio\"\n                                  v-model=\"DebtRatio\">\n                            <template v-slot:append>\n                                <v-text-field class=\"mt-0 pt-0\" hide-details single-line style=\"width: 60px\"\n                                              type=\"number\" v-model=\"DebtRatio\"></v-text-field>\n                            </template>\n                        </v-slider>\n                    </v-col>\n                </v-row>\n                <v-row>\n                    <v-col class=\"pr-4\">\n                        <v-slider @input=\"rerender\" class=\"align-center\" hide-details\n                                  label=\"Monthly Income\"\n                                  v-model=\"MonthlyIncome\">\n                            <template v-slot:append>\n                                <v-text-field class=\"mt-0 pt-0\" hide-details single-line style=\"width: 60px\"\n                                              type=\"number\" v-model=\"MonthlyIncome\"></v-text-field>\n                            </template>\n                        </v-slider>\n                    </v-col>\n                </v-row>\n                <v-row>\n                    <v-col class=\"pr-4\">\n                        <v-slider @input=\"rerender\" class=\"align-center\"\n                                  hide-details label=\"Number Of Open Credit Lines And Loans\"\n                                  v-model=\"NumberOfOpenCreditLinesAndLoans\">\n                            <template v-slot:append>\n                                <v-text-field class=\"mt-0 pt-0\" hide-details single-line style=\"width: 60px\"\n                                              type=\"number\" v-model=\"NumberOfOpenCreditLinesAndLoans\"></v-text-field>\n                            </template>\n                        </v-slider>\n                    </v-col>\n                </v-row>\n                <v-row>\n                    <v-col class=\"pr-4\">\n                        <v-slider @input=\"rerender\" class=\"align-center\"\n                                  hide-details label=\"Number Of Times 90 Days Late\"\n                                  v-model=\"NumberOfTimes90DaysLate\">\n                            <template v-slot:append>\n                                <v-text-field class=\"mt-0 pt-0\" hide-details single-line style=\"width: 60px\"\n                                              type=\"number\" v-model=\"NumberOfTimes90DaysLate\"></v-text-field>\n                            </template>\n                        </v-slider>\n                    </v-col>\n                </v-row>\n                <v-row>\n                    <v-col class=\"pr-4\">\n                        <v-slider @input=\"rerender\" class=\"align-center\"\n                                  hide-details label=\"Number Real Estate Loans Or Lines\"\n                                  v-model=\"NumberRealEstateLoansOrLines\">\n                            <template v-slot:append>\n                                <v-text-field class=\"mt-0 pt-0\" hide-details single-line style=\"width: 60px\"\n                                              type=\"number\"\n                                              v-model=\"NumberRealEstateLoansOrLines\"></v-text-field>\n                            </template>\n                        </v-slider>\n                    </v-col>\n                </v-row>\n                <v-row>\n                    <v-col class=\"pr-4\">\n                        <v-slider\n                                class=\"align-center\"\n                                hide-details\n                                label=\"Number Of Time 60-89 Days Past Due Not Worse\"\n                                v-model=\"NumberOfTime60_89DaysPastDueNotWorse\"\n                        >\n                            <template v-slot:append>\n                                <v-text-field\n                                        class=\"mt-0 pt-0\"\n                                        hide-details\n                                        single-line\n                                        style=\"width: 60px\"\n                                        type=\"number\"\n                                        v-model=\"NumberOfTime60_89DaysPastDueNotWorse\"\n                                ></v-text-field>\n                            </template>\n                        </v-slider>\n                    </v-col>\n                </v-row>\n                <v-row>\n                    <v-col class=\"pr-4\">\n                        <v-slider @input=\"rerender\" class=\"align-center\" hide-details\n                                  label=\"Number Of Dependents\"\n                                  v-model=\"NumberOfDependents\">\n                            <template v-slot:append>\n                                <v-text-field class=\"mt-0 pt-0\" hide-details single-line style=\"width: 60px\"\n                                              type=\"number\" v-model=\"NumberOfDependents\"></v-text-field>\n                            </template>\n                        </v-slider>\n                    </v-col>\n                </v-row>\n            </v-card-text>\n            <v-progress-linear height=\"25\" :value=\"result\" :color=\"color\">\n                <strong>Risk {{ (this.result - 50) * 2 }}%</strong>\n            </v-progress-linear>\n        </v-main>\n    </v-app>\n</template>\n\n<script>\n\n    import _predict from './scripts/AdaBoostClassifier'\n\n    export default {\n        name: 'App',\n\n        components: {},\n\n        data: () => ({\n            RevolvingUtilizationOfUnsecuredLines: 1,\n            Age: 2,\n            NumberOfTime30_59DaysPastDueNotWorse: 3,\n            DebtRatio: 4,\n            MonthlyIncome: 5,\n            NumberOfOpenCreditLinesAndLoans: 6,\n            NumberOfTimes90DaysLate: 7,\n            NumberRealEstateLoansOrLines: 8,\n            NumberOfTime60_89DaysPastDueNotWorse: 9,\n            NumberOfDependents: 30,\n            result: 50,\n            color: \"blue\"\n        }),\n\n        methods: {\n            rerender() {\n                const features = [NaN, this.RevolvingUtilizationOfUnsecuredLines, this.Age, this.NumberOfTime30_59DaysPastDueNotWorse,\n                    this.DebtRatio, this.MonthlyIncome, this.NumberOfOpenCreditLinesAndLoans, this.NumberOfTimes90DaysLate, this.NumberRealEstateLoansOrLines,\n                    this.NumberOfTime60_89DaysPastDueNotWorse, this.NumberOfDependents];\n                console.log(features);\n                this.result = _predict(features) * 50 + 50;\n                if (this.result > 75) {\n                    this.color = \"red\"\n                } else if (this.result > 50) {\n                    this.color = \"amber\"\n                } else if (this.result === 50) {\n                    this.color = \"blue\"\n                } else {\n                    this.color = \"green\"\n                }\n            }\n        }\n\n    };\n</script>\n","import mod from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./App.vue?vue&type=template&id=3698dc9e&\"\nimport script from \"./App.vue?vue&type=script&lang=js&\"\nexport * from \"./App.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports\n\n/* vuetify-loader */\nimport installComponents from \"!../node_modules/vuetify-loader/lib/runtime/installComponents.js\"\nimport { VApp } from 'vuetify/lib/components/VApp';\nimport { VAppBar } from 'vuetify/lib/components/VAppBar';\nimport { VCardText } from 'vuetify/lib/components/VCard';\nimport { VCol } from 'vuetify/lib/components/VGrid';\nimport { VIcon } from 'vuetify/lib/components/VIcon';\nimport { VMain } from 'vuetify/lib/components/VMain';\nimport { VProgressLinear } from 'vuetify/lib/components/VProgressLinear';\nimport { VRow } from 'vuetify/lib/components/VGrid';\nimport { VSlider } from 'vuetify/lib/components/VSlider';\nimport { VSpacer } from 'vuetify/lib/components/VGrid';\nimport { VTextField } from 'vuetify/lib/components/VTextField';\nimport { VToolbarTitle } from 'vuetify/lib/components/VToolbar';\ninstallComponents(component, {VApp,VAppBar,VCardText,VCol,VIcon,VMain,VProgressLinear,VRow,VSlider,VSpacer,VTextField,VToolbarTitle})\n","import Vue from 'vue';\nimport Vuetify from 'vuetify/lib';\n\nVue.use(Vuetify);\n\nexport default new Vuetify({\n});\n","import Vue from 'vue'\nimport App from './App.vue'\nimport vuetify from './plugins/vuetify';\n\nVue.config.productionTip = false\n\nnew Vue({\n  vuetify,\n  render: h => h(App)\n}).$mount('#app')\n"],"sourceRoot":""}